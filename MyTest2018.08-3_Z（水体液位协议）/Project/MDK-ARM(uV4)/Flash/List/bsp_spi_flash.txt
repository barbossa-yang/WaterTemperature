; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_spi_flash.crf ..\..\User\bsp\src\bsp_spi_flash.c]
                          THUMB

                          AREA ||i.bsp_InitSFlash||, CODE, READONLY, ALIGN=1

                  bsp_InitSFlash PROC
;;;161    */
;;;162    void bsp_InitSFlash(void)
000000  b510              PUSH     {r4,lr}
;;;163    {
;;;164    	sf_ConfigGPIO();			/* 配置GPIO */
000002  f7fffffe          BL       sf_ConfigGPIO
;;;165    	
;;;166    	//sf_CfgSpiHard();
;;;167    
;;;168    	sf_ReadInfo();				/* 自动识别芯片型号 */
000006  f7fffffe          BL       sf_ReadInfo
;;;169    
;;;170    	sf_SetCS(0);				/* 软件方式，使能串行Flash片选 */
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       sf_SetCS
;;;171    	bsp_spiWrite1(CMD_DISWR);		/* 发送禁止写入的命令,即使能软件写保护 */
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       bsp_spiWrite1
;;;172    	sf_SetCS(1);				/* 软件方式，禁能串行Flash片选 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       sf_SetCS
;;;173    
;;;174    	sf_WaitForWriteEnd();		/* 等待串行Flash内部操作完成 */
00001c  f7fffffe          BL       sf_WaitForWriteEnd
;;;175    
;;;176    	sf_WriteStatus(0);			/* 解除所有BLOCK的写保护 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_WriteStatus
;;;177    }
000026  bd10              POP      {r4,pc}
;;;178    
                          ENDP


                          AREA ||i.sf_AutoWritePage||, CODE, READONLY, ALIGN=2

                  sf_AutoWritePage PROC
;;;437    */
;;;438    static uint8_t sf_AutoWritePage(uint8_t *_ucpSrc, uint32_t _uiWrAddr, uint16_t _usWrLen)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;439    {
000004  b081              SUB      sp,sp,#4
000006  f5ad5d80          SUB      sp,sp,#0x1000
00000a  4607              MOV      r7,r0
00000c  460d              MOV      r5,r1
00000e  4616              MOV      r6,r2
;;;440    	uint16_t i;
;;;441    	uint16_t j;					/* 用于延时 */
;;;442    	uint32_t uiFirstAddr;		/* 扇区首址 */
;;;443    	uint8_t ucNeedErase;		/* 1表示需要擦除 */
;;;444    	uint8_t cRet;
;;;445    	uint8_t s_spiBuf[4*1024];	/* 用于写函数，先读出整个page，修改缓冲区后，再整个page回写 */	
;;;446    
;;;447    	/* 长度为0时不继续操作,直接认为成功 */
;;;448    	if (_usWrLen == 0)
000010  b92e              CBNZ     r6,|L2.30|
;;;449    	{
;;;450    		return 1;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;451    	}
;;;452    
;;;453    	/* 如果偏移地址超过芯片容量则退出 */
;;;454    	if (_uiWrAddr >= g_tSF.TotalSize)
;;;455    	{
;;;456    		return 0;
;;;457    	}
;;;458    
;;;459    	/* 如果数据长度大于扇区容量，则退出 */
;;;460    	if (_usWrLen > g_tSF.PageSize)
;;;461    	{
;;;462    		return 0;
;;;463    	}
;;;464    
;;;465    	/* 如果FLASH中的数据没有变化,则不写FLASH */
;;;466    	sf_ReadBuffer(s_spiBuf, _uiWrAddr, _usWrLen);
;;;467    	if (memcmp(s_spiBuf, _ucpSrc, _usWrLen) == 0)
;;;468    	{
;;;469    		return 1;
;;;470    	}
;;;471    
;;;472    	/* 判断是否需要先擦除扇区 */
;;;473    	/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;474    	ucNeedErase = 0;
;;;475    	if (sf_NeedErase(s_spiBuf, _ucpSrc, _usWrLen))
;;;476    	{
;;;477    		ucNeedErase = 1;
;;;478    	}
;;;479    
;;;480    	uiFirstAddr = _uiWrAddr & (~(g_tSF.PageSize - 1));
;;;481    
;;;482    	if (_usWrLen == g_tSF.PageSize)		/* 整个扇区都改写 */
;;;483    	{
;;;484    		for	(i = 0; i < g_tSF.PageSize; i++)
;;;485    		{
;;;486    			s_spiBuf[i] = _ucpSrc[i];
;;;487    		}
;;;488    	}
;;;489    	else						/* 改写部分数据 */
;;;490    	{
;;;491    		/* 先将整个扇区的数据读出 */
;;;492    		sf_ReadBuffer(s_spiBuf, uiFirstAddr, g_tSF.PageSize);
;;;493    
;;;494    		/* 再用新数据覆盖 */
;;;495    		i = _uiWrAddr & (g_tSF.PageSize - 1);
;;;496    		memcpy(&s_spiBuf[i], _ucpSrc, _usWrLen);
;;;497    	}
;;;498    
;;;499    	/* 写完之后进行校验，如果不正确则重写，最多3次 */
;;;500    	cRet = 0;
;;;501    	for (i = 0; i < 3; i++)
;;;502    	{
;;;503    
;;;504    		/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;505    		if (ucNeedErase == 1)
;;;506    		{
;;;507    			sf_EraseSector(uiFirstAddr);		/* 擦除1个扇区 */
;;;508    		}
;;;509    
;;;510    		/* 编程一个PAGE */
;;;511    		sf_PageWrite(s_spiBuf, uiFirstAddr, g_tSF.PageSize);
;;;512    
;;;513    		if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;514    		{
;;;515    			cRet = 1;
;;;516    			break;
;;;517    		}
;;;518    		else
;;;519    		{
;;;520    			if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;521    			{
;;;522    				cRet = 1;
;;;523    				break;
;;;524    			}
;;;525    
;;;526    			/* 失败后延迟一段时间再重试 */
;;;527    			for (j = 0; j < 10000; j++);
;;;528    		}
;;;529    	}
;;;530    
;;;531    	return cRet;
;;;532    }
000014  b001              ADD      sp,sp,#4
000016  f50d5d80          ADD      sp,sp,#0x1000
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.30|
00001e  483e              LDR      r0,|L2.280|
000020  6940              LDR      r0,[r0,#0x14]         ;454  ; g_tSF
000022  42a8              CMP      r0,r5                 ;454
000024  d801              BHI      |L2.42|
000026  2000              MOVS     r0,#0                 ;456
000028  e7f4              B        |L2.20|
                  |L2.42|
00002a  483b              LDR      r0,|L2.280|
00002c  8b00              LDRH     r0,[r0,#0x18]         ;460  ; g_tSF
00002e  42b0              CMP      r0,r6                 ;460
000030  da01              BGE      |L2.54|
000032  2000              MOVS     r0,#0                 ;462
000034  e7ee              B        |L2.20|
                  |L2.54|
000036  4632              MOV      r2,r6                 ;466
000038  4629              MOV      r1,r5                 ;466
00003a  a801              ADD      r0,sp,#4              ;466
00003c  f7fffffe          BL       sf_ReadBuffer
000040  4632              MOV      r2,r6                 ;467
000042  4639              MOV      r1,r7                 ;467
000044  a801              ADD      r0,sp,#4              ;467
000046  f7fffffe          BL       memcmp
00004a  b908              CBNZ     r0,|L2.80|
00004c  2001              MOVS     r0,#1                 ;469
00004e  e7e1              B        |L2.20|
                  |L2.80|
000050  f04f0a00          MOV      r10,#0                ;474
000054  4632              MOV      r2,r6                 ;475
000056  4639              MOV      r1,r7                 ;475
000058  a801              ADD      r0,sp,#4              ;475
00005a  f7fffffe          BL       sf_NeedErase
00005e  b108              CBZ      r0,|L2.100|
000060  f04f0a01          MOV      r10,#1                ;477
                  |L2.100|
000064  482c              LDR      r0,|L2.280|
000066  8b00              LDRH     r0,[r0,#0x18]         ;480  ; g_tSF
000068  1e40              SUBS     r0,r0,#1              ;480
00006a  ea250800          BIC      r8,r5,r0              ;480
00006e  482a              LDR      r0,|L2.280|
000070  8b00              LDRH     r0,[r0,#0x18]         ;482  ; g_tSF
000072  42b0              CMP      r0,r6                 ;482
000074  d10b              BNE      |L2.142|
000076  2400              MOVS     r4,#0                 ;484
000078  e004              B        |L2.132|
                  |L2.122|
00007a  5d38              LDRB     r0,[r7,r4]            ;486
00007c  a901              ADD      r1,sp,#4              ;486
00007e  5508              STRB     r0,[r1,r4]            ;486
000080  1c60              ADDS     r0,r4,#1              ;484
000082  b284              UXTH     r4,r0                 ;484
                  |L2.132|
000084  4824              LDR      r0,|L2.280|
000086  8b00              LDRH     r0,[r0,#0x18]         ;484  ; g_tSF
000088  42a0              CMP      r0,r4                 ;484
00008a  dcf6              BGT      |L2.122|
00008c  e010              B        |L2.176|
                  |L2.142|
00008e  4822              LDR      r0,|L2.280|
000090  8b02              LDRH     r2,[r0,#0x18]         ;492  ; g_tSF
000092  4641              MOV      r1,r8                 ;492
000094  a801              ADD      r0,sp,#4              ;492
000096  f7fffffe          BL       sf_ReadBuffer
00009a  481f              LDR      r0,|L2.280|
00009c  8b00              LDRH     r0,[r0,#0x18]         ;495  ; g_tSF
00009e  1e40              SUBS     r0,r0,#1              ;495
0000a0  4028              ANDS     r0,r0,r5              ;495
0000a2  b284              UXTH     r4,r0                 ;495
0000a4  a901              ADD      r1,sp,#4              ;496
0000a6  1908              ADDS     r0,r1,r4              ;496
0000a8  4632              MOV      r2,r6                 ;496
0000aa  4639              MOV      r1,r7                 ;496
0000ac  f7fffffe          BL       __aeabi_memcpy
                  |L2.176|
0000b0  f04f0b00          MOV      r11,#0                ;500
0000b4  2400              MOVS     r4,#0                 ;501
0000b6  e02a              B        |L2.270|
                  |L2.184|
0000b8  f1ba0f01          CMP      r10,#1                ;505
0000bc  d102              BNE      |L2.196|
0000be  4640              MOV      r0,r8                 ;507
0000c0  f7fffffe          BL       sf_EraseSector
                  |L2.196|
0000c4  4814              LDR      r0,|L2.280|
0000c6  8b02              LDRH     r2,[r0,#0x18]         ;511  ; g_tSF
0000c8  4641              MOV      r1,r8                 ;511
0000ca  a801              ADD      r0,sp,#4              ;511
0000cc  f7fffffe          BL       sf_PageWrite
0000d0  4632              MOV      r2,r6                 ;513
0000d2  4639              MOV      r1,r7                 ;513
0000d4  4628              MOV      r0,r5                 ;513
0000d6  f7fffffe          BL       sf_CmpData
0000da  b910              CBNZ     r0,|L2.226|
0000dc  f04f0b01          MOV      r11,#1                ;515
0000e0  e017              B        |L2.274|
                  |L2.226|
0000e2  4632              MOV      r2,r6                 ;520
0000e4  4639              MOV      r1,r7                 ;520
0000e6  4628              MOV      r0,r5                 ;520
0000e8  f7fffffe          BL       sf_CmpData
0000ec  b910              CBNZ     r0,|L2.244|
0000ee  f04f0b01          MOV      r11,#1                ;522
0000f2  e00e              B        |L2.274|
                  |L2.244|
0000f4  f04f0900          MOV      r9,#0                 ;527
0000f8  e003              B        |L2.258|
                  |L2.250|
0000fa  f1090001          ADD      r0,r9,#1              ;527
0000fe  fa1ff980          UXTH     r9,r0                 ;527
                  |L2.258|
000102  f2427010          MOV      r0,#0x2710            ;527
000106  4581              CMP      r9,r0                 ;527
000108  dbf7              BLT      |L2.250|
00010a  1c60              ADDS     r0,r4,#1              ;501
00010c  b284              UXTH     r4,r0                 ;501
                  |L2.270|
00010e  2c03              CMP      r4,#3                 ;501
000110  dbd2              BLT      |L2.184|
                  |L2.274|
000112  bf00              NOP                            ;516
000114  4658              MOV      r0,r11                ;531
000116  e77d              B        |L2.20|
;;;533    
                          ENDP

                  |L2.280|
                          DCD      g_tSF

                          AREA ||i.sf_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  sf_CfgSpiHard PROC
;;;93     */
;;;94     void sf_CfgSpiHard(void)
000000  b500              PUSH     {lr}
;;;95     {
000002  b085              SUB      sp,sp,#0x14
;;;96     	SPI_InitTypeDef  SPI_InitStructure;
;;;97     
;;;98     	/* 配置SPI硬件参数 */
;;;99     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 数据方向：2线全双工 */
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;100    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* STM32的SPI工作模式 ：主机模式 */
00000a  f44f7082          MOV      r0,#0x104
00000e  f8ad0002          STRH     r0,[sp,#2]
;;;101    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 数据位长度 ： 8位 */
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;102    	/* SPI_CPOL和SPI_CPHA结合使用决定时钟和数据采样点的相位关系、
;;;103    	   本例配置: 总线空闲是高电平,第2个边沿（上升沿采样数据)
;;;104    	*/
;;;105    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			/* 时钟上升沿采样数据 */
000018  2002              MOVS     r0,#2
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;106    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		/* 时钟的第2个边沿采样数据 */
00001e  2001              MOVS     r0,#1
000020  f8ad0008          STRH     r0,[sp,#8]
;;;107    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			/* 片选控制方式：软件控制 */
000024  0240              LSLS     r0,r0,#9
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;108    
;;;109    	/* 设置波特率预分频系数 SPI_BaudRatePrescaler_8 ，实测SCK周期 96ns, 10.4MHz */
;;;110    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad000c          STRH     r0,[sp,#0xc]
;;;111    
;;;112    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 数据位传输次序：高位先传 */
000030  2000              MOVS     r0,#0
000032  f8ad000e          STRH     r0,[sp,#0xe]
;;;113    	SPI_InitStructure.SPI_CRCPolynomial = 7;			/* CRC多项式寄存器，复位后为7。本例程不用 */
000036  2007              MOVS     r0,#7
000038  f8ad0010          STRH     r0,[sp,#0x10]
;;;114    	SPI_Init(SPI1, &SPI_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4804              LDR      r0,|L3.80|
000040  f7fffffe          BL       SPI_Init
;;;115    
;;;116    	SPI_Cmd(SPI1, ENABLE);				/* 使能SPI  */
000044  2101              MOVS     r1,#1
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       SPI_Cmd
;;;117    }
00004c  b005              ADD      sp,sp,#0x14
00004e  bd00              POP      {pc}
;;;118    
                          ENDP

                  |L3.80|
                          DCD      0x40013000

                          AREA ||i.sf_CmpData||, CODE, READONLY, ALIGN=2

                  sf_CmpData PROC
;;;349    */
;;;350    static uint8_t sf_CmpData(uint32_t _uiSrcAddr, uint8_t *_ucpTar, uint32_t _uiSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;351    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;352    	uint8_t ucValue;
;;;353    
;;;354    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;355    	if ((_uiSrcAddr + _uiSize) > g_tSF.TotalSize)
00000a  1960              ADDS     r0,r4,r5
00000c  4918              LDR      r1,|L4.112|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d902              BLS      |L4.26|
;;;356    	{
;;;357    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;358    	}
;;;359    
;;;360    	if (_uiSize == 0)
;;;361    	{
;;;362    		return 0;
;;;363    	}
;;;364    
;;;365    	sf_SetCS(0);									/* 使能片选 */
;;;366    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;367    	bsp_spiWrite1((_uiSrcAddr & 0xFF0000) >> 16);		/* 发送扇区地址的高8bit */
;;;368    	bsp_spiWrite1((_uiSrcAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;369    	bsp_spiWrite1(_uiSrcAddr & 0xFF);					/* 发送扇区地址低8bit */
;;;370    	while (_uiSize--)
;;;371    	{
;;;372    		/* 读一个字节 */
;;;373    		ucValue = bsp_spiRead1();
;;;374    		if (*_ucpTar++ != ucValue)
;;;375    		{
;;;376    			sf_SetCS(1);
;;;377    			return 1;
;;;378    		}
;;;379    	}
;;;380    	sf_SetCS(1);
;;;381    	return 0;
;;;382    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  b90d              CBNZ     r5,|L4.32|
00001c  2000              MOVS     r0,#0                 ;362
00001e  e7fa              B        |L4.22|
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;365
000022  f7fffffe          BL       sf_SetCS
000026  2003              MOVS     r0,#3                 ;366
000028  f7fffffe          BL       bsp_spiWrite1
00002c  f3c44007          UBFX     r0,r4,#16,#8          ;367
000030  f7fffffe          BL       bsp_spiWrite1
000034  f3c42007          UBFX     r0,r4,#8,#8           ;368
000038  f7fffffe          BL       bsp_spiWrite1
00003c  b2e0              UXTB     r0,r4                 ;369
00003e  f7fffffe          BL       bsp_spiWrite1
000042  e00b              B        |L4.92|
                  |L4.68|
000044  f7fffffe          BL       bsp_spiRead1
000048  4607              MOV      r7,r0                 ;373
00004a  f8161b01          LDRB     r1,[r6],#1            ;374
00004e  42b9              CMP      r1,r7                 ;374
000050  d004              BEQ      |L4.92|
000052  2001              MOVS     r0,#1                 ;376
000054  f7fffffe          BL       sf_SetCS
000058  2001              MOVS     r0,#1                 ;377
00005a  e7dc              B        |L4.22|
                  |L4.92|
00005c  0028              MOVS     r0,r5                 ;370
00005e  f1a50501          SUB      r5,r5,#1              ;370
000062  d1ef              BNE      |L4.68|
000064  2001              MOVS     r0,#1                 ;380
000066  f7fffffe          BL       sf_SetCS
00006a  2000              MOVS     r0,#0                 ;381
00006c  e7d3              B        |L4.22|
;;;383    
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
                          DCD      g_tSF

                          AREA ||i.sf_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  sf_ConfigGPIO PROC
;;;66     */
;;;67     static void sf_ConfigGPIO(void)
000000  b508              PUSH     {r3,lr}
;;;68     {
;;;69     	/*
;;;70     		安富莱STM32-V4 开发板口线分配：  串行Flash型号为 W25Q64BVSSIG (80MHz)
;;;71     		PF8/SF_CS
;;;72     	*/
;;;73     	GPIO_InitTypeDef GPIO_InitStructure;
;;;74     
;;;75     	/* 使能GPIO 时钟 */
;;;76     	RCC_APB2PeriphClockCmd(SF_RCC_CS, ENABLE);
000002  2101              MOVS     r1,#1
000004  2080              MOVS     r0,#0x80
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;77     
;;;78     	/* 配置片选口线为推挽输出模式 */
;;;79     	sf_SetCS(1);		/* 片选置高，不选中 */
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       sf_SetCS
;;;80     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;81     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;82     	GPIO_InitStructure.GPIO_Pin = SF_PIN_CS;
00001c  f44f6000          MOV      r0,#0x800
000020  f8ad0000          STRH     r0,[sp,#0]
;;;83     	GPIO_Init(SF_PORT_CS, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4802              LDR      r0,|L5.48|
000028  f7fffffe          BL       GPIO_Init
;;;84     }
00002c  bd08              POP      {r3,pc}
;;;85     
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      0x40011c00

                          AREA ||i.sf_EraseChip||, CODE, READONLY, ALIGN=1

                  sf_EraseChip PROC
;;;209    */
;;;210    void sf_EraseChip(void)
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	sf_WriteEnable();								/* 发送写使能命令 */
000002  f7fffffe          BL       sf_WriteEnable
;;;213    
;;;214    	/* 擦除扇区操作 */
;;;215    	sf_SetCS(0);									/* 使能片选 */
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       sf_SetCS
;;;216    	bsp_spiWrite1(CMD_BE);							/* 发送整片擦除命令 */
00000c  20c7              MOVS     r0,#0xc7
00000e  f7fffffe          BL       bsp_spiWrite1
;;;217    	sf_SetCS(1);									/* 禁能片选 */
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       sf_SetCS
;;;218    
;;;219    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000018  f7fffffe          BL       sf_WaitForWriteEnd
;;;220    }
00001c  bd10              POP      {r4,pc}
;;;221    
                          ENDP


                          AREA ||i.sf_EraseSector||, CODE, READONLY, ALIGN=1

                  sf_EraseSector PROC
;;;186    */
;;;187    void sf_EraseSector(uint32_t _uiSectorAddr)
000000  b510              PUSH     {r4,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189    	sf_WriteEnable();								/* 发送写使能命令 */
000004  f7fffffe          BL       sf_WriteEnable
;;;190    
;;;191    	/* 擦除扇区操作 */
;;;192    	sf_SetCS(0);									/* 使能片选 */
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       sf_SetCS
;;;193    	bsp_spiWrite1(CMD_SE);								/* 发送擦除命令 */
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       bsp_spiWrite1
;;;194    	bsp_spiWrite1((_uiSectorAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
000014  f3c44007          UBFX     r0,r4,#16,#8
000018  f7fffffe          BL       bsp_spiWrite1
;;;195    	bsp_spiWrite1((_uiSectorAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
00001c  f3c42007          UBFX     r0,r4,#8,#8
000020  f7fffffe          BL       bsp_spiWrite1
;;;196    	bsp_spiWrite1(_uiSectorAddr & 0xFF);				/* 发送扇区地址低8bit */
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       bsp_spiWrite1
;;;197    	sf_SetCS(1);									/* 禁能片选 */
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       sf_SetCS
;;;198    
;;;199    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000030  f7fffffe          BL       sf_WaitForWriteEnd
;;;200    }
000034  bd10              POP      {r4,pc}
;;;201    
                          ENDP


                          AREA ||i.sf_NeedErase||, CODE, READONLY, ALIGN=1

                  sf_NeedErase PROC
;;;393    */
;;;394    static uint8_t sf_NeedErase(uint8_t * _ucpOldBuf, uint8_t *_ucpNewBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;395    {
000002  4603              MOV      r3,r0
;;;396    	uint16_t i;
;;;397    	uint8_t ucOld;
;;;398    
;;;399    	/*
;;;400    	算法第1步：old 求反, new 不变
;;;401    	      old    new
;;;402    		  1101   0101
;;;403    	~     1111
;;;404    		= 0010   0101
;;;405    
;;;406    	算法第2步: old 求反的结果与 new 位与
;;;407    		  0010   old
;;;408    	&	  0101   new
;;;409    		 =0000
;;;410    
;;;411    	算法第3步: 结果为0,则表示无需擦除. 否则表示需要擦除
;;;412    	*/
;;;413    
;;;414    	for (i = 0; i < _usLen; i++)
000004  2400              MOVS     r4,#0
000006  e00b              B        |L8.32|
                  |L8.8|
;;;415    	{
;;;416    		ucOld = *_ucpOldBuf++;
000008  f8135b01          LDRB     r5,[r3],#1
;;;417    		ucOld = ~ucOld;
00000c  43e8              MVNS     r0,r5
00000e  b2c5              UXTB     r5,r0
;;;418    
;;;419    		/* 注意错误的写法: if (ucOld & (*_ucpNewBuf++) != 0) */
;;;420    		if ((ucOld & (*_ucpNewBuf++)) != 0)
000010  f8110b01          LDRB     r0,[r1],#1
000014  4228              TST      r0,r5
000016  d001              BEQ      |L8.28|
;;;421    		{
;;;422    			return 1;
000018  2001              MOVS     r0,#1
                  |L8.26|
;;;423    		}
;;;424    	}
;;;425    	return 0;
;;;426    }
00001a  bd70              POP      {r4-r6,pc}
                  |L8.28|
00001c  1c60              ADDS     r0,r4,#1              ;414
00001e  b284              UXTH     r4,r0                 ;414
                  |L8.32|
000020  4294              CMP      r4,r2                 ;414
000022  dbf1              BLT      |L8.8|
000024  2000              MOVS     r0,#0                 ;425
000026  e7f8              B        |L8.26|
;;;427    
                          ENDP


                          AREA ||i.sf_PageWrite||, CODE, READONLY, ALIGN=2

                  sf_PageWrite PROC
;;;231    */
;;;232    void sf_PageWrite(uint8_t * _pBuf, uint32_t _uiWriteAddr, uint16_t _usSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;233    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;234    	uint32_t i, j;
;;;235    
;;;236    	if (g_tSF.ChipID == SST25VF016B_ID)
00000a  484a              LDR      r0,|L9.308|
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  494a              LDR      r1,|L9.312|
000010  4288              CMP      r0,r1
000012  d153              BNE      |L9.188|
;;;237    	{
;;;238    		/* AAI指令要求传入的数据个数是偶数 */
;;;239    		if ((_usSize < 2) && (_usSize % 2))
000014  2d02              CMP      r5,#2
000016  da08              BGE      |L9.42|
000018  4628              MOV      r0,r5
00001a  eb0571d0          ADD      r1,r5,r0,LSR #31
00001e  1049              ASRS     r1,r1,#1
000020  ebb50141          SUBS     r1,r5,r1,LSL #1
000024  d001              BEQ      |L9.42|
                  |L9.38|
;;;240    		{
;;;241    			return ;
;;;242    		}
;;;243    
;;;244    		sf_WriteEnable();								/* 发送写使能命令 */
;;;245    
;;;246    		sf_SetCS(0);									/* 使能片选 */
;;;247    		bsp_spiWrite1(CMD_AAI);							/* 发送AAI命令(地址自动增加编程) */
;;;248    		bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;249    		bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;250    		bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;251    		bsp_spiWrite1(*_pBuf++);							/* 发送第1个数据 */
;;;252    		bsp_spiWrite1(*_pBuf++);							/* 发送第2个数据 */
;;;253    		sf_SetCS(1);									/* 禁能片选 */
;;;254    
;;;255    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;256    
;;;257    		_usSize -= 2;									/* 计算剩余字节数 */
;;;258    
;;;259    		for (i = 0; i < _usSize / 2; i++)
;;;260    		{
;;;261    			sf_SetCS(0);								/* 使能片选 */
;;;262    			bsp_spiWrite1(CMD_AAI);						/* 发送AAI命令(地址自动增加编程) */
;;;263    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;264    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;265    			sf_SetCS(1);								/* 禁能片选 */
;;;266    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;267    		}
;;;268    
;;;269    		/* 进入写保护状态 */
;;;270    		sf_SetCS(0);
;;;271    		bsp_spiWrite1(CMD_DISWR);
;;;272    		sf_SetCS(1);
;;;273    
;;;274    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;275    	}
;;;276    	else	/* for MX25L1606E 、 W25Q64BV */
;;;277    	{
;;;278    		for (j = 0; j < _usSize / 256; j++)
;;;279    		{
;;;280    			sf_WriteEnable();								/* 发送写使能命令 */
;;;281    
;;;282    			sf_SetCS(0);									/* 使能片选 */
;;;283    			bsp_spiWrite1(0x02);								/* 发送AAI命令(地址自动增加编程) */
;;;284    			bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;285    			bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;286    			bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;287    
;;;288    			for (i = 0; i < 256; i++)
;;;289    			{
;;;290    				bsp_spiWrite1(*_pBuf++);					/* 发送数据 */
;;;291    			}
;;;292    
;;;293    			sf_SetCS(1);								/* 禁止片选 */
;;;294    
;;;295    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;296    
;;;297    			_uiWriteAddr += 256;
;;;298    		}
;;;299    
;;;300    		/* 进入写保护状态 */
;;;301    		sf_SetCS(0);
;;;302    		bsp_spiWrite1(CMD_DISWR);
;;;303    		sf_SetCS(1);
;;;304    
;;;305    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;306    	}
;;;307    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L9.42|
00002a  f7fffffe          BL       sf_WriteEnable
00002e  2000              MOVS     r0,#0                 ;246
000030  f7fffffe          BL       sf_SetCS
000034  20ad              MOVS     r0,#0xad              ;247
000036  f7fffffe          BL       bsp_spiWrite1
00003a  f3c64007          UBFX     r0,r6,#16,#8          ;248
00003e  f7fffffe          BL       bsp_spiWrite1
000042  f3c62007          UBFX     r0,r6,#8,#8           ;249
000046  f7fffffe          BL       bsp_spiWrite1
00004a  b2f0              UXTB     r0,r6                 ;250
00004c  f7fffffe          BL       bsp_spiWrite1
000050  f8140b01          LDRB     r0,[r4],#1            ;251
000054  f7fffffe          BL       bsp_spiWrite1
000058  f8140b01          LDRB     r0,[r4],#1            ;252
00005c  f7fffffe          BL       bsp_spiWrite1
000060  2001              MOVS     r0,#1                 ;253
000062  f7fffffe          BL       sf_SetCS
000066  f7fffffe          BL       sf_WaitForWriteEnd
00006a  1ea8              SUBS     r0,r5,#2              ;257
00006c  b285              UXTH     r5,r0                 ;257
00006e  2700              MOVS     r7,#0                 ;259
000070  e013              B        |L9.154|
                  |L9.114|
000072  2000              MOVS     r0,#0                 ;261
000074  f7fffffe          BL       sf_SetCS
000078  20ad              MOVS     r0,#0xad              ;262
00007a  f7fffffe          BL       bsp_spiWrite1
00007e  f8140b01          LDRB     r0,[r4],#1            ;263
000082  f7fffffe          BL       bsp_spiWrite1
000086  f8140b01          LDRB     r0,[r4],#1            ;264
00008a  f7fffffe          BL       bsp_spiWrite1
00008e  2001              MOVS     r0,#1                 ;265
000090  f7fffffe          BL       sf_SetCS
000094  f7fffffe          BL       sf_WaitForWriteEnd
000098  1c7f              ADDS     r7,r7,#1              ;259
                  |L9.154|
00009a  eb0571d5          ADD      r1,r5,r5,LSR #31      ;259
00009e  ebb70f61          CMP      r7,r1,ASR #1          ;259
0000a2  d3e6              BCC      |L9.114|
0000a4  2000              MOVS     r0,#0                 ;270
0000a6  f7fffffe          BL       sf_SetCS
0000aa  2004              MOVS     r0,#4                 ;271
0000ac  f7fffffe          BL       bsp_spiWrite1
0000b0  2001              MOVS     r0,#1                 ;272
0000b2  f7fffffe          BL       sf_SetCS
0000b6  f7fffffe          BL       sf_WaitForWriteEnd
0000ba  e038              B        |L9.302|
                  |L9.188|
0000bc  f04f0800          MOV      r8,#0                 ;278
0000c0  e024              B        |L9.268|
                  |L9.194|
0000c2  f7fffffe          BL       sf_WriteEnable
0000c6  2000              MOVS     r0,#0                 ;282
0000c8  f7fffffe          BL       sf_SetCS
0000cc  2002              MOVS     r0,#2                 ;283
0000ce  f7fffffe          BL       bsp_spiWrite1
0000d2  f3c64007          UBFX     r0,r6,#16,#8          ;284
0000d6  f7fffffe          BL       bsp_spiWrite1
0000da  f3c62007          UBFX     r0,r6,#8,#8           ;285
0000de  f7fffffe          BL       bsp_spiWrite1
0000e2  b2f0              UXTB     r0,r6                 ;286
0000e4  f7fffffe          BL       bsp_spiWrite1
0000e8  2700              MOVS     r7,#0                 ;288
0000ea  e004              B        |L9.246|
                  |L9.236|
0000ec  f8140b01          LDRB     r0,[r4],#1            ;290
0000f0  f7fffffe          BL       bsp_spiWrite1
0000f4  1c7f              ADDS     r7,r7,#1              ;288
                  |L9.246|
0000f6  2fff              CMP      r7,#0xff              ;288
0000f8  d9f8              BLS      |L9.236|
0000fa  2001              MOVS     r0,#1                 ;293
0000fc  f7fffffe          BL       sf_SetCS
000100  f7fffffe          BL       sf_WaitForWriteEnd
000104  f5067680          ADD      r6,r6,#0x100          ;297
000108  f1080801          ADD      r8,r8,#1              ;278
                  |L9.268|
00010c  17e9              ASRS     r1,r5,#31             ;278
00010e  eb056111          ADD      r1,r5,r1,LSR #24      ;278
000112  ebb82f21          CMP      r8,r1,ASR #8          ;278
000116  d3d4              BCC      |L9.194|
000118  2000              MOVS     r0,#0                 ;301
00011a  f7fffffe          BL       sf_SetCS
00011e  2004              MOVS     r0,#4                 ;302
000120  f7fffffe          BL       bsp_spiWrite1
000124  2001              MOVS     r0,#1                 ;303
000126  f7fffffe          BL       sf_SetCS
00012a  f7fffffe          BL       sf_WaitForWriteEnd
                  |L9.302|
00012e  bf00              NOP      
000130  e779              B        |L9.38|
;;;308    
                          ENDP

000132  0000              DCW      0x0000
                  |L9.308|
                          DCD      g_tSF
                  |L9.312|
                          DCD      0x00bf2541

                          AREA ||i.sf_ReadBuffer||, CODE, READONLY, ALIGN=2

                  sf_ReadBuffer PROC
;;;318    */
;;;319    void sf_ReadBuffer(uint8_t * _pBuf, uint32_t _uiReadAddr, uint32_t _uiSize)
000000  b570              PUSH     {r4-r6,lr}
;;;320    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;321    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;322    	if ((_uiSize == 0) ||(_uiReadAddr + _uiSize) > g_tSF.TotalSize)
000008  b125              CBZ      r5,|L10.20|
00000a  1960              ADDS     r0,r4,r5
00000c  4911              LDR      r1,|L10.84|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d900              BLS      |L10.22|
                  |L10.20|
;;;323    	{
;;;324    		return;
;;;325    	}
;;;326    
;;;327    	/* 擦除扇区操作 */
;;;328    	sf_SetCS(0);									/* 使能片选 */
;;;329    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;330    	bsp_spiWrite1((_uiReadAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;331    	bsp_spiWrite1((_uiReadAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;332    	bsp_spiWrite1(_uiReadAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;333    	while (_uiSize--)
;;;334    	{
;;;335    		*_pBuf++ = bsp_spiRead1();			/* 读一个字节并存储到pBuf，读完后指针自加1 */
;;;336    	}
;;;337    	sf_SetCS(1);									/* 禁能片选 */
;;;338    }
000014  bd70              POP      {r4-r6,pc}
                  |L10.22|
000016  2000              MOVS     r0,#0                 ;328
000018  f7fffffe          BL       sf_SetCS
00001c  2003              MOVS     r0,#3                 ;329
00001e  f7fffffe          BL       bsp_spiWrite1
000022  f3c44007          UBFX     r0,r4,#16,#8          ;330
000026  f7fffffe          BL       bsp_spiWrite1
00002a  f3c42007          UBFX     r0,r4,#8,#8           ;331
00002e  f7fffffe          BL       bsp_spiWrite1
000032  b2e0              UXTB     r0,r4                 ;332
000034  f7fffffe          BL       bsp_spiWrite1
000038  e003              B        |L10.66|
                  |L10.58|
00003a  f7fffffe          BL       bsp_spiRead1
00003e  f8060b01          STRB     r0,[r6],#1            ;335
                  |L10.66|
000042  0028              MOVS     r0,r5                 ;333
000044  f1a50501          SUB      r5,r5,#1              ;333
000048  d1f7              BNE      |L10.58|
00004a  2001              MOVS     r0,#1                 ;337
00004c  f7fffffe          BL       sf_SetCS
000050  bf00              NOP      
000052  e7df              B        |L10.20|
;;;339    
                          ENDP

                  |L10.84|
                          DCD      g_tSF

                          AREA ||i.sf_ReadID||, CODE, READONLY, ALIGN=1

                  sf_ReadID PROC
;;;651    */
;;;652    uint32_t sf_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;653    {
;;;654    	uint32_t uiID;
;;;655    	uint8_t id1, id2, id3;
;;;656    
;;;657    	sf_SetCS(0);									/* 使能片选 */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       sf_SetCS
;;;658    	bsp_spiWrite1(CMD_RDID);								/* 发送读ID命令 */
00000a  209f              MOVS     r0,#0x9f
00000c  f7fffffe          BL       bsp_spiWrite1
;;;659    	id1 = bsp_spiRead1();					/* 读ID的第1个字节 */
000010  f7fffffe          BL       bsp_spiRead1
000014  4605              MOV      r5,r0
;;;660    	id2 = bsp_spiRead1();					/* 读ID的第2个字节 */
000016  f7fffffe          BL       bsp_spiRead1
00001a  4606              MOV      r6,r0
;;;661    	id3 = bsp_spiRead1();					/* 读ID的第3个字节 */
00001c  f7fffffe          BL       bsp_spiRead1
000020  4607              MOV      r7,r0
;;;662    	sf_SetCS(1);									/* 禁能片选 */
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       sf_SetCS
;;;663    
;;;664    	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
000028  0428              LSLS     r0,r5,#16
00002a  ea402006          ORR      r0,r0,r6,LSL #8
00002e  ea400407          ORR      r4,r0,r7
;;;665    
;;;666    	return uiID;
000032  4620              MOV      r0,r4
;;;667    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;668    
                          ENDP


                          AREA ||i.sf_ReadInfo||, CODE, READONLY, ALIGN=2

                  sf_ReadInfo PROC
;;;676    */
;;;677    void sf_ReadInfo(void)
000000  b510              PUSH     {r4,lr}
;;;678    {
;;;679    	/* 自动识别串行Flash型号 */
;;;680    	{
;;;681    		g_tSF.ChipID = sf_ReadID();	/* 芯片ID */
000002  f7fffffe          BL       sf_ReadID
000006  4927              LDR      r1,|L12.164|
000008  6008              STR      r0,[r1,#0]  ; g_tSF
;;;682    
;;;683    		switch (g_tSF.ChipID)
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  4926              LDR      r1,|L12.168|
000010  1840              ADDS     r0,r0,r1
000012  d008              BEQ      |L12.38|
000014  4925              LDR      r1,|L12.172|
000016  1840              ADDS     r0,r0,r1
000018  d011              BEQ      |L12.62|
00001a  4925              LDR      r1,|L12.176|
00001c  1840              ADDS     r0,r0,r1
00001e  d01a              BEQ      |L12.86|
000020  2801              CMP      r0,#1
000022  d130              BNE      |L12.134|
000024  e023              B        |L12.110|
                  |L12.38|
;;;684    		{
;;;685    			case SST25VF016B_ID:
;;;686    				strcpy(g_tSF.ChipName, "SST25VF016B");
000026  a123              ADR      r1,|L12.180|
000028  481e              LDR      r0,|L12.164|
00002a  1d00              ADDS     r0,r0,#4
00002c  f7fffffe          BL       strcpy
;;;687    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000030  f44f1000          MOV      r0,#0x200000
000034  491b              LDR      r1,|L12.164|
000036  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;688    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000038  1240              ASRS     r0,r0,#9
00003a  8308              STRH     r0,[r1,#0x18]
;;;689    				break;
00003c  e02f              B        |L12.158|
                  |L12.62|
;;;690    
;;;691    			case MX25L1606E_ID:
;;;692    				strcpy(g_tSF.ChipName, "MX25L1606E");
00003e  a120              ADR      r1,|L12.192|
000040  4818              LDR      r0,|L12.164|
000042  1d00              ADDS     r0,r0,#4
000044  f7fffffe          BL       strcpy
;;;693    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000048  f44f1000          MOV      r0,#0x200000
00004c  4915              LDR      r1,|L12.164|
00004e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;694    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000050  1240              ASRS     r0,r0,#9
000052  8308              STRH     r0,[r1,#0x18]
;;;695    				break;
000054  e023              B        |L12.158|
                  |L12.86|
;;;696    
;;;697    			case W25Q64_ID:
;;;698    				strcpy(g_tSF.ChipName, "W25Q64");
000056  a11d              ADR      r1,|L12.204|
000058  4812              LDR      r0,|L12.164|
00005a  1d00              ADDS     r0,r0,#4
00005c  f7fffffe          BL       strcpy
;;;699    				g_tSF.TotalSize = 8 * 1024 * 1024;	/* 总容量 = 8M */
000060  f44f0000          MOV      r0,#0x800000
000064  490f              LDR      r1,|L12.164|
000066  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;700    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000068  12c0              ASRS     r0,r0,#11
00006a  8308              STRH     r0,[r1,#0x18]
;;;701    				break;
00006c  e017              B        |L12.158|
                  |L12.110|
;;;702    
;;;703    
;;;704    			case W25Q128_ID:
;;;705    				strcpy(g_tSF.ChipName, "W25Q128");
00006e  a119              ADR      r1,|L12.212|
000070  480c              LDR      r0,|L12.164|
000072  1d00              ADDS     r0,r0,#4
000074  f7fffffe          BL       strcpy
;;;706    				g_tSF.TotalSize = 16 * 1024 * 1024;	/* 总容量 = 16M */
000078  f04f7080          MOV      r0,#0x1000000
00007c  4909              LDR      r1,|L12.164|
00007e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;707    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000080  1300              ASRS     r0,r0,#12
000082  8308              STRH     r0,[r1,#0x18]
;;;708    				break;			
000084  e00b              B        |L12.158|
                  |L12.134|
;;;709    
;;;710    			default:
;;;711    				strcpy(g_tSF.ChipName, "Unknow Flash");
000086  a115              ADR      r1,|L12.220|
000088  4806              LDR      r0,|L12.164|
00008a  1d00              ADDS     r0,r0,#4
00008c  f7fffffe          BL       strcpy
;;;712    				g_tSF.TotalSize = 2 * 1024 * 1024;
000090  f44f1000          MOV      r0,#0x200000
000094  4903              LDR      r1,|L12.164|
000096  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;713    				g_tSF.PageSize = 4 * 1024;
000098  1240              ASRS     r0,r0,#9
00009a  8308              STRH     r0,[r1,#0x18]
;;;714    				break;
00009c  bf00              NOP      
                  |L12.158|
00009e  bf00              NOP                            ;689
;;;715    		}
;;;716    	}
;;;717    }
0000a0  bd10              POP      {r4,pc}
;;;718    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L12.164|
                          DCD      g_tSF
                  |L12.168|
                          DCD      0xff40dabf
                  |L12.172|
                          DCD      0xfffd052c
                  |L12.176|
                          DCD      0xffd2dffe
                  |L12.180|
0000b4  53535432          DCB      "SST25VF016B",0
0000b8  35564630
0000bc  31364200
                  |L12.192|
0000c0  4d583235          DCB      "MX25L1606E",0
0000c4  4c313630
0000c8  364500  
0000cb  00                DCB      0
                  |L12.204|
0000cc  57323551          DCB      "W25Q64",0
0000d0  363400  
0000d3  00                DCB      0
                  |L12.212|
0000d4  57323551          DCB      "W25Q128",0
0000d8  31323800
                  |L12.220|
0000dc  556e6b6e          DCB      "Unknow Flash",0
0000e0  6f772046
0000e4  6c617368
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0

                          AREA ||i.sf_SetCS||, CODE, READONLY, ALIGN=2

                  sf_SetCS PROC
;;;126    */
;;;127    static void sf_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;128    {
000002  4604              MOV      r4,r0
;;;129    	if (_level == 0)
000004  b954              CBNZ     r4,|L13.28|
;;;130    	{
;;;131    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;132    
;;;133    		#ifdef SOFT_SPI		/* 软件SPI */
;;;134    			bsp_SetSpiSck(1);
;;;135    			SF_CS_0();
;;;136    		#endif
;;;137    
;;;138    		#ifdef HARD_SPI		/* 硬件SPI */
;;;139    
;;;140    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
00000a  f2403017          MOV      r0,#0x317
00000e  f7fffffe          BL       bsp_SPI_Init
;;;141    				| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;142    
;;;143    			SF_CS_0();
000012  f44f6000          MOV      r0,#0x800
000016  4905              LDR      r1,|L13.44|
000018  6008              STR      r0,[r1,#0]
00001a  e006              B        |L13.42|
                  |L13.28|
;;;144    		#endif
;;;145    	}
;;;146    	else
;;;147    	{
;;;148    		SF_CS_1();
00001c  f44f6000          MOV      r0,#0x800
000020  4902              LDR      r1,|L13.44|
000022  1f09              SUBS     r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;149    
;;;150    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
000026  f7fffffe          BL       bsp_SpiBusExit
                  |L13.42|
;;;151    	}
;;;152    }
00002a  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L13.44|
                          DCD      0x40011c14

                          AREA ||i.sf_WaitForWriteEnd||, CODE, READONLY, ALIGN=1

                  sf_WaitForWriteEnd PROC
;;;774    */
;;;775    static void sf_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;776    {
;;;777    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;778    	bsp_spiWrite1(CMD_RDSR);							/* 发送命令， 读状态寄存器 */
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       bsp_spiWrite1
;;;779    	while((bsp_spiRead1() & WIP_FLAG) == SET);	/* 判断状态寄存器的忙标志位 */
00000e  bf00              NOP      
                  |L14.16|
000010  f7fffffe          BL       bsp_spiRead1
000014  f0100f01          TST      r0,#1
000018  d1fa              BNE      |L14.16|
;;;780    	sf_SetCS(1);									/* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;781    }
000020  bd10              POP      {r4,pc}
;;;782    
                          ENDP


                          AREA ||i.sf_WriteBuffer||, CODE, READONLY, ALIGN=2

                  sf_WriteBuffer PROC
;;;543    */
;;;544    uint8_t sf_WriteBuffer(uint8_t* _pBuf, uint32_t _uiWriteAddr, uint16_t _usWriteSize)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;545    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;546    	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
00000a  f04f0800          MOV      r8,#0
00000e  46c1              MOV      r9,r8
000010  46c2              MOV      r10,r8
000012  2400              MOVS     r4,#0
000014  46a3              MOV      r11,r4
;;;547    
;;;548    	Addr = _uiWriteAddr % g_tSF.PageSize;
000016  4856              LDR      r0,|L15.368|
000018  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00001a  fbb5f1f0          UDIV     r1,r5,r0
00001e  fb005011          MLS      r0,r0,r1,r5
000022  fa1ffa80          UXTH     r10,r0
;;;549    	count = g_tSF.PageSize - Addr;
000026  4852              LDR      r0,|L15.368|
000028  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00002a  eba0000a          SUB      r0,r0,r10
00002e  b284              UXTH     r4,r0
;;;550    	NumOfPage =  _usWriteSize / g_tSF.PageSize;
000030  484f              LDR      r0,|L15.368|
000032  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000034  fb96f0f0          SDIV     r0,r6,r0
000038  fa1ff880          UXTH     r8,r0
;;;551    	NumOfSingle = _usWriteSize % g_tSF.PageSize;
00003c  484c              LDR      r0,|L15.368|
00003e  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000040  fb96f1f0          SDIV     r1,r6,r0
000044  fb006011          MLS      r0,r0,r1,r6
000048  fa1ff980          UXTH     r9,r0
;;;552    
;;;553    	if (Addr == 0) /* 起始地址是页面首地址  */
00004c  f1ba0f00          CMP      r10,#0
000050  d12a              BNE      |L15.168|
;;;554    	{
;;;555    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
000052  f1b80f00          CMP      r8,#0
000056  d108              BNE      |L15.106|
;;;556    		{
;;;557    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
000058  4632              MOV      r2,r6
00005a  4629              MOV      r1,r5
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       sf_AutoWritePage
000062  2800              CMP      r0,#0
000064  d17e              BNE      |L15.356|
                  |L15.102|
;;;558    			{
;;;559    				return 0;
;;;560    			}
;;;561    		}
;;;562    		else 	/* 数据长度大于等于页面大小 */
;;;563    		{
;;;564    			while (NumOfPage--)
;;;565    			{
;;;566    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.PageSize) == 0)
;;;567    				{
;;;568    					return 0;
;;;569    				}
;;;570    				_uiWriteAddr +=  g_tSF.PageSize;
;;;571    				_pBuf += g_tSF.PageSize;
;;;572    			}
;;;573    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;574    			{
;;;575    				return 0;
;;;576    			}
;;;577    		}
;;;578    	}
;;;579    	else  /* 起始地址不是页面首地址  */
;;;580    	{
;;;581    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
;;;582    		{
;;;583    			if (NumOfSingle > count) /* (_usWriteSize + _uiWriteAddr) > SPI_FLASH_PAGESIZE */
;;;584    			{
;;;585    				temp = NumOfSingle - count;
;;;586    
;;;587    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;588    				{
;;;589    					return 0;
;;;590    				}
;;;591    
;;;592    				_uiWriteAddr +=  count;
;;;593    				_pBuf += count;
;;;594    
;;;595    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, temp) == 0)
;;;596    				{
;;;597    					return 0;
;;;598    				}
;;;599    			}
;;;600    			else
;;;601    			{
;;;602    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
;;;603    				{
;;;604    					return 0;
;;;605    				}
;;;606    			}
;;;607    		}
;;;608    		else	/* 数据长度大于等于页面大小 */
;;;609    		{
;;;610    			_usWriteSize -= count;
;;;611    			NumOfPage =  _usWriteSize / g_tSF.PageSize;
;;;612    			NumOfSingle = _usWriteSize % g_tSF.PageSize;
;;;613    
;;;614    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;615    			{
;;;616    				return 0;
;;;617    			}
;;;618    
;;;619    			_uiWriteAddr +=  count;
;;;620    			_pBuf += count;
;;;621    
;;;622    			while (NumOfPage--)
;;;623    			{
;;;624    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.PageSize) == 0)
;;;625    				{
;;;626    					return 0;
;;;627    				}
;;;628    				_uiWriteAddr +=  g_tSF.PageSize;
;;;629    				_pBuf += g_tSF.PageSize;
;;;630    			}
;;;631    
;;;632    			if (NumOfSingle != 0)
;;;633    			{
;;;634    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;635    				{
;;;636    					return 0;
;;;637    				}
;;;638    			}
;;;639    		}
;;;640    	}
;;;641    	return 1;	/* 成功 */
;;;642    }
000066  e8bd9ff0          POP      {r4-r12,pc}
                  |L15.106|
00006a  e00e              B        |L15.138|
                  |L15.108|
00006c  4840              LDR      r0,|L15.368|
00006e  8b02              LDRH     r2,[r0,#0x18]         ;566  ; g_tSF
000070  4629              MOV      r1,r5                 ;566
000072  4638              MOV      r0,r7                 ;566
000074  f7fffffe          BL       sf_AutoWritePage
000078  b908              CBNZ     r0,|L15.126|
00007a  2000              MOVS     r0,#0                 ;568
00007c  e7f3              B        |L15.102|
                  |L15.126|
00007e  483c              LDR      r0,|L15.368|
000080  8b00              LDRH     r0,[r0,#0x18]         ;570  ; g_tSF
000082  4405              ADD      r5,r5,r0              ;570
000084  483a              LDR      r0,|L15.368|
000086  8b00              LDRH     r0,[r0,#0x18]         ;571  ; g_tSF
000088  4407              ADD      r7,r7,r0              ;571
                  |L15.138|
00008a  ea5f0008          MOVS     r0,r8                 ;564
00008e  f1a80101          SUB      r1,r8,#1              ;564
000092  fa1ff881          UXTH     r8,r1                 ;564
000096  d1e9              BNE      |L15.108|
000098  464a              MOV      r2,r9                 ;573
00009a  4629              MOV      r1,r5                 ;573
00009c  4638              MOV      r0,r7                 ;573
00009e  f7fffffe          BL       sf_AutoWritePage
0000a2  2800              CMP      r0,#0                 ;573
0000a4  d161              BNE      |L15.362|
0000a6  e7de              B        |L15.102|
                  |L15.168|
0000a8  f1b80f00          CMP      r8,#0                 ;581
0000ac  d11f              BNE      |L15.238|
0000ae  45a1              CMP      r9,r4                 ;583
0000b0  dd15              BLE      |L15.222|
0000b2  eba90004          SUB      r0,r9,r4              ;585
0000b6  fa1ffb80          UXTH     r11,r0                ;585
0000ba  4622              MOV      r2,r4                 ;587
0000bc  4629              MOV      r1,r5                 ;587
0000be  4638              MOV      r0,r7                 ;587
0000c0  f7fffffe          BL       sf_AutoWritePage
0000c4  b908              CBNZ     r0,|L15.202|
0000c6  2000              MOVS     r0,#0                 ;589
0000c8  e7cd              B        |L15.102|
                  |L15.202|
0000ca  4425              ADD      r5,r5,r4              ;592
0000cc  4427              ADD      r7,r7,r4              ;593
0000ce  465a              MOV      r2,r11                ;595
0000d0  4629              MOV      r1,r5                 ;595
0000d2  4638              MOV      r0,r7                 ;595
0000d4  f7fffffe          BL       sf_AutoWritePage
0000d8  2800              CMP      r0,#0                 ;595
0000da  d146              BNE      |L15.362|
0000dc  e7c3              B        |L15.102|
                  |L15.222|
0000de  4632              MOV      r2,r6                 ;602
0000e0  4629              MOV      r1,r5                 ;602
0000e2  4638              MOV      r0,r7                 ;602
0000e4  f7fffffe          BL       sf_AutoWritePage
0000e8  bbe0              CBNZ     r0,|L15.356|
0000ea  2000              MOVS     r0,#0                 ;604
0000ec  e7bb              B        |L15.102|
                  |L15.238|
0000ee  1b30              SUBS     r0,r6,r4              ;610
0000f0  b286              UXTH     r6,r0                 ;610
0000f2  481f              LDR      r0,|L15.368|
0000f4  8b00              LDRH     r0,[r0,#0x18]         ;611  ; g_tSF
0000f6  fb96f0f0          SDIV     r0,r6,r0              ;611
0000fa  fa1ff880          UXTH     r8,r0                 ;611
0000fe  481c              LDR      r0,|L15.368|
000100  8b00              LDRH     r0,[r0,#0x18]         ;612  ; g_tSF
000102  fb96f1f0          SDIV     r1,r6,r0              ;612
000106  fb006011          MLS      r0,r0,r1,r6           ;612
00010a  fa1ff980          UXTH     r9,r0                 ;612
00010e  4622              MOV      r2,r4                 ;614
000110  4629              MOV      r1,r5                 ;614
000112  4638              MOV      r0,r7                 ;614
000114  f7fffffe          BL       sf_AutoWritePage
000118  b908              CBNZ     r0,|L15.286|
00011a  2000              MOVS     r0,#0                 ;616
00011c  e7a3              B        |L15.102|
                  |L15.286|
00011e  4425              ADD      r5,r5,r4              ;619
000120  4427              ADD      r7,r7,r4              ;620
000122  e00e              B        |L15.322|
                  |L15.292|
000124  4812              LDR      r0,|L15.368|
000126  8b02              LDRH     r2,[r0,#0x18]         ;624  ; g_tSF
000128  4629              MOV      r1,r5                 ;624
00012a  4638              MOV      r0,r7                 ;624
00012c  f7fffffe          BL       sf_AutoWritePage
000130  b908              CBNZ     r0,|L15.310|
000132  2000              MOVS     r0,#0                 ;626
000134  e797              B        |L15.102|
                  |L15.310|
000136  480e              LDR      r0,|L15.368|
000138  8b00              LDRH     r0,[r0,#0x18]         ;628  ; g_tSF
00013a  4405              ADD      r5,r5,r0              ;628
00013c  480c              LDR      r0,|L15.368|
00013e  8b00              LDRH     r0,[r0,#0x18]         ;629  ; g_tSF
000140  4407              ADD      r7,r7,r0              ;629
                  |L15.322|
000142  ea5f0008          MOVS     r0,r8                 ;622
000146  f1a80101          SUB      r1,r8,#1              ;622
00014a  fa1ff881          UXTH     r8,r1                 ;622
00014e  d1e9              BNE      |L15.292|
000150  f1b90f00          CMP      r9,#0                 ;632
000154  d009              BEQ      |L15.362|
000156  464a              MOV      r2,r9                 ;634
000158  4629              MOV      r1,r5                 ;634
00015a  4638              MOV      r0,r7                 ;634
00015c  f7fffffe          BL       sf_AutoWritePage
000160  b900              CBNZ     r0,|L15.356|
000162  e000              B        |L15.358|
                  |L15.356|
000164  e001              B        |L15.362|
                  |L15.358|
000166  2000              MOVS     r0,#0                 ;636
000168  e77d              B        |L15.102|
                  |L15.362|
00016a  2001              MOVS     r0,#1                 ;641
00016c  e77b              B        |L15.102|
;;;643    
                          ENDP

00016e  0000              DCW      0x0000
                  |L15.368|
                          DCD      g_tSF

                          AREA ||i.sf_WriteEnable||, CODE, READONLY, ALIGN=1

                  sf_WriteEnable PROC
;;;726    */
;;;727    static void sf_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;728    {
;;;729    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;730    	bsp_spiWrite1(CMD_WREN);								/* 发送命令 */
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       bsp_spiWrite1
;;;731    	sf_SetCS(1);									/* 禁能片选 */
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       sf_SetCS
;;;732    }
000014  bd10              POP      {r4,pc}
;;;733    
                          ENDP


                          AREA ||i.sf_WriteStatus||, CODE, READONLY, ALIGN=2

                  sf_WriteStatus PROC
;;;741    */
;;;742    static void sf_WriteStatus(uint8_t _ucValue)
000000  b510              PUSH     {r4,lr}
;;;743    {
000002  4604              MOV      r4,r0
;;;744    
;;;745    	if (g_tSF.ChipID == SST25VF016B_ID)
000004  4813              LDR      r0,|L17.84|
000006  6800              LDR      r0,[r0,#0]  ; g_tSF
000008  4913              LDR      r1,|L17.88|
00000a  4288              CMP      r0,r1
00000c  d115              BNE      |L17.58|
;;;746    	{
;;;747    		/* 第1步：先使能写状态寄存器 */
;;;748    		sf_SetCS(0);									/* 使能片选 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       sf_SetCS
;;;749    		bsp_spiWrite1(CMD_EWRSR);							/* 发送命令， 允许写状态寄存器 */
000014  2050              MOVS     r0,#0x50
000016  f7fffffe          BL       bsp_spiWrite1
;;;750    		sf_SetCS(1);									/* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;751    
;;;752    		/* 第2步：再写状态寄存器 */
;;;753    		sf_SetCS(0);									/* 使能片选 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_SetCS
;;;754    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       bsp_spiWrite1
;;;755    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       bsp_spiWrite1
;;;756    		sf_SetCS(1);									/* 禁能片选 */
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       sf_SetCS
000038  e00b              B        |L17.82|
                  |L17.58|
;;;757    	}
;;;758    	else
;;;759    	{
;;;760    		sf_SetCS(0);									/* 使能片选 */
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       sf_SetCS
;;;761    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       bsp_spiWrite1
;;;762    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       bsp_spiWrite1
;;;763    		sf_SetCS(1);									/* 禁能片选 */
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       sf_SetCS
                  |L17.82|
;;;764    	}
;;;765    }
000052  bd10              POP      {r4,pc}
;;;766    
                          ENDP

                  |L17.84|
                          DCD      g_tSF
                  |L17.88|
                          DCD      0x00bf2541

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tSF
                          %        28

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_spi_flash_c_69e7dfca____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REVSH|
#line 128
|__asm___15_bsp_spi_flash_c_69e7dfca____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
