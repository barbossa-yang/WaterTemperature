; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f10x_it.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\stm32f10x_it.crf ..\..\User\bsp\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;106    */    
;;;107    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;108    {
;;;109      /* 当总线异常时进入死循环 */
;;;110      while (1)
000002  e7fe              B        |L1.2|
;;;111      {
;;;112      }
;;;113    }
;;;114    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;138    */   
;;;139    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;140    {
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=2

                  HardFault_Handler PROC
;;;54     */ 
;;;55     void HardFault_Handler(void)
000000  a109              ADR      r1,|L3.40|
;;;56     {
;;;57     #if 1
;;;58       const char *pError = ERR_INFO;
;;;59       uint8_t i;
;;;60     
;;;61       for (i = 0; i < sizeof(ERR_INFO); i++)
000002  2000              MOVS     r0,#0
000004  e00b              B        |L3.30|
                  |L3.6|
;;;62       {
;;;63          USART1->DR = pError[i];
000006  5c0a              LDRB     r2,[r1,r0]
000008  4b12              LDR      r3,|L3.84|
00000a  801a              STRH     r2,[r3,#0]
;;;64          /* 等待发送结束 */
;;;65          while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET);
00000c  bf00              NOP      
                  |L3.14|
00000e  4a11              LDR      r2,|L3.84|
000010  1f12              SUBS     r2,r2,#4
000012  8812              LDRH     r2,[r2,#0]
000014  f0120f40          TST      r2,#0x40
000018  d0f9              BEQ      |L3.14|
00001a  1c42              ADDS     r2,r0,#1              ;61
00001c  b2d0              UXTB     r0,r2                 ;61
                  |L3.30|
00001e  282a              CMP      r0,#0x2a              ;61
000020  d3f1              BCC      |L3.6|
;;;66       }
;;;67     #endif	
;;;68       /* 当硬件失效异常发生时进入死循环 */
;;;69       while (1)
000022  bf00              NOP      
                  |L3.36|
000024  e7fe              B        |L3.36|
;;;70       {
;;;71       }
;;;72     }
;;;73     
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
000028  0d0a456e          DCB      "\r\nEnter HardFault_Handler, System Halt.\r\n",0
00002c  74657220
000030  48617264
000034  4661756c
000038  745f4861
00003c  6e646c65
000040  722c2053
000044  79737465
000048  6d204861
00004c  6c742e0d
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0
                  |L3.84|
                          DCD      0x40013804

                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;90     */   
;;;91     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;92     {
;;;93       /* 当内存管理异常发生时进入死循环 */
;;;94       while (1)
000002  e7fe              B        |L4.2|
;;;95       {
;;;96       }
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;42     */  
;;;43     void NMI_Handler(void)
000000  4770              BX       lr
;;;44     {
;;;45     }
;;;46     
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;238    
;;;239    void TIM4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;240    {
;;;241    	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
000002  2101              MOVS     r1,#1
000004  4815              LDR      r0,|L6.92|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b330              CBZ      r0,|L6.90|
;;;242    	{
;;;243    		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
00000c  2101              MOVS     r1,#1
00000e  4813              LDR      r0,|L6.92|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;244    		
;;;245    		wait_time_gauge++;
000014  4812              LDR      r0,|L6.96|
000016  6800              LDR      r0,[r0,#0]  ; wait_time_gauge
000018  1c40              ADDS     r0,r0,#1
00001a  4911              LDR      r1,|L6.96|
00001c  6008              STR      r0,[r1,#0]  ; wait_time_gauge
;;;246    		
;;;247    		if(freq_en)
00001e  4811              LDR      r0,|L6.100|
000020  7800              LDRB     r0,[r0,#0]  ; freq_en
000022  b1d0              CBZ      r0,|L6.90|
;;;248    		{
;;;249    			if(Timer4_Counter++ >= 2)
000024  4910              LDR      r1,|L6.104|
000026  6808              LDR      r0,[r1,#0]  ; Timer4_Counter
000028  1c41              ADDS     r1,r0,#1
00002a  4a0f              LDR      r2,|L6.104|
00002c  6011              STR      r1,[r2,#0]  ; Timer4_Counter
00002e  2802              CMP      r0,#2
000030  d313              BCC      |L6.90|
;;;250    			{
;;;251    				freq_index = 0;
000032  2000              MOVS     r0,#0
000034  490d              LDR      r1,|L6.108|
000036  8008              STRH     r0,[r1,#0]
;;;252    					
;;;253    				TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
000038  2102              MOVS     r1,#2
00003a  480d              LDR      r0,|L6.112|
00003c  f7fffffe          BL       TIM_ClearITPendingBit
;;;254    				TIM_ITConfig(TIM5, TIM_IT_CC1, DISABLE);
000040  2200              MOVS     r2,#0
000042  2102              MOVS     r1,#2
000044  480a              LDR      r0,|L6.112|
000046  f7fffffe          BL       TIM_ITConfig
;;;255    				
;;;256    				//TIM_ITConfig(TIM4, TIM_IT_Update,DISABLE);	
;;;257    
;;;258    				gauge_timeout_flag   = TRUE;
00004a  2001              MOVS     r0,#1
00004c  4909              LDR      r1,|L6.116|
00004e  7008              STRB     r0,[r1,#0]
;;;259    				measure_success_flag = FALSE;
000050  2000              MOVS     r0,#0
000052  4909              LDR      r1,|L6.120|
000054  7008              STRB     r0,[r1,#0]
;;;260    
;;;261    				TIM_CallBack4();			
000056  f7fffffe          BL       TIM_CallBack4
                  |L6.90|
;;;262    			}
;;;263    		}
;;;264    	}
;;;265    
;;;266    }
00005a  bd10              POP      {r4,pc}
;;;267    
                          ENDP

                  |L6.92|
                          DCD      0x40000800
                  |L6.96|
                          DCD      wait_time_gauge
                  |L6.100|
                          DCD      freq_en
                  |L6.104|
                          DCD      Timer4_Counter
                  |L6.108|
                          DCD      freq_index
                  |L6.112|
                          DCD      0x40000c00
                  |L6.116|
                          DCD      gauge_timeout_flag
                  |L6.120|
                          DCD      measure_success_flag

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;190    
;;;191    void TIM5_IRQHandler(void) 
000000  b510              PUSH     {r4,lr}
;;;192    {
;;;193    	if (TIM_GetITStatus(TIM5, TIM_IT_CC1) != RESET)
000002  2102              MOVS     r1,#2
000004  481f              LDR      r0,|L7.132|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2800              CMP      r0,#0
00000c  d039              BEQ      |L7.130|
;;;194    	{
;;;195    		TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
00000e  2102              MOVS     r1,#2
000010  481c              LDR      r0,|L7.132|
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;196    
;;;197    		IC2Value = TIM_GetCapture2(TIM5);
000016  481b              LDR      r0,|L7.132|
000018  f7fffffe          BL       TIM_GetCapture2
00001c  491a              LDR      r1,|L7.136|
00001e  8008              STRH     r0,[r1,#0]
;;;198    
;;;199    		if (IC2Value != 0)
000020  4608              MOV      r0,r1
000022  8800              LDRH     r0,[r0,#0]  ; IC2Value
000024  b350              CBZ      r0,|L7.124|
;;;200    		{
;;;201    			Frequency = 72000000 / IC2Value;//*0.968284609;//0.9979753767;
000026  4608              MOV      r0,r1
000028  8800              LDRH     r0,[r0,#0]  ; IC2Value
00002a  4918              LDR      r1,|L7.140|
00002c  fb91f0f0          SDIV     r0,r1,r0
000030  4917              LDR      r1,|L7.144|
000032  6008              STR      r0,[r1,#0]  ; Frequency
;;;202    			
;;;203    			freq[freq_index++] = Frequency;	
000034  680a              LDR      r2,[r1,#0]  ; Frequency
000036  4917              LDR      r1,|L7.148|
000038  8808              LDRH     r0,[r1,#0]  ; freq_index
00003a  1c41              ADDS     r1,r0,#1
00003c  4b15              LDR      r3,|L7.148|
00003e  8019              STRH     r1,[r3,#0]
000040  4915              LDR      r1,|L7.152|
000042  f8412020          STR      r2,[r1,r0,LSL #2]
;;;204    		
;;;205    			if(freq_index >= Filter_Times)	  
000046  4618              MOV      r0,r3
000048  8800              LDRH     r0,[r0,#0]  ; freq_index
00004a  2830              CMP      r0,#0x30
00004c  db19              BLT      |L7.130|
;;;206    			{
;;;207    				freq_index = 0;
00004e  2000              MOVS     r0,#0
000050  4619              MOV      r1,r3
000052  8008              STRH     r0,[r1,#0]
;;;208    				
;;;209    				TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
000054  2102              MOVS     r1,#2
000056  480b              LDR      r0,|L7.132|
000058  f7fffffe          BL       TIM_ClearITPendingBit
;;;210    				TIM_ITConfig(TIM5, TIM_IT_CC1, DISABLE);
00005c  2200              MOVS     r2,#0
00005e  2102              MOVS     r1,#2
000060  4808              LDR      r0,|L7.132|
000062  f7fffffe          BL       TIM_ITConfig
;;;211    				
;;;212    				measure_success_flag = TRUE;
000066  2001              MOVS     r0,#1
000068  490c              LDR      r1,|L7.156|
00006a  7008              STRB     r0,[r1,#0]
;;;213    				gauge_timeout_flag   = FALSE;
00006c  2000              MOVS     r0,#0
00006e  490c              LDR      r1,|L7.160|
000070  7008              STRB     r0,[r1,#0]
;;;214    				
;;;215    				freq_en = false;
000072  490c              LDR      r1,|L7.164|
000074  7008              STRB     r0,[r1,#0]
;;;216    				
;;;217    				TIM_CallBack2();				
000076  f7fffffe          BL       TIM_CallBack2
00007a  e002              B        |L7.130|
                  |L7.124|
;;;218    			}
;;;219    		}
;;;220    		else
;;;221    		{
;;;222    			Frequency = 0;
00007c  2000              MOVS     r0,#0
00007e  4904              LDR      r1,|L7.144|
000080  6008              STR      r0,[r1,#0]  ; Frequency
                  |L7.130|
;;;223    		}
;;;224    	}
;;;225    }
000082  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  |L7.132|
                          DCD      0x40000c00
                  |L7.136|
                          DCD      IC2Value
                  |L7.140|
                          DCD      0x044aa200
                  |L7.144|
                          DCD      Frequency
                  |L7.148|
                          DCD      freq_index
                  |L7.152|
                          DCD      freq
                  |L7.156|
                          DCD      measure_success_flag
                  |L7.160|
                          DCD      gauge_timeout_flag
                  |L7.164|
                          DCD      freq_en

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;122    */   
;;;123    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L8.2|
;;;124    {
;;;125      /* 当用法异常时进入死循环 */
;;;126      while (1)
000002  e7fe              B        |L8.2|
;;;127      {
;;;128      }
;;;129    }
;;;130    
                          ENDP


                          AREA ||i.hard_fault_handler_c||, CODE, READONLY, ALIGN=1

                  hard_fault_handler_c PROC
;;;73     
;;;74     void hard_fault_handler_c(unsigned int * hardfault_args)   
000000  bf00              NOP      
                  |L9.2|
;;;75     {   
;;;76     	while(1) 
000002  e7fe              B        |L9.2|
;;;77     	{ 
;;;78     		; 
;;;79     	} 
;;;80     
;;;81     }   
;;;82     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  freq
                          %        192

                          AREA ||.data||, DATA, ALIGN=2

                  IC2Value
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  Frequency
                          DCD      0x00000000
                  freq_index
000008  0000              DCW      0x0000
                  measure_success_flag
00000a  00                DCB      0x00
                  gauge_timeout_flag
00000b  00                DCB      0x00
                  freq_en
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  Timer4_Counter
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\stm32f10x_it.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f10x_it_c_bb8ca80c____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f10x_it_c_bb8ca80c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f10x_it_c_bb8ca80c____REVSH|
#line 128
|__asm___14_stm32f10x_it_c_bb8ca80c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
