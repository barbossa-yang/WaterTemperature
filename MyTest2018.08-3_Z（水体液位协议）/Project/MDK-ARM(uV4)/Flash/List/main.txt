; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppTaskAtmos||, CODE, READONLY, ALIGN=2

                  AppTaskAtmos PROC
;;;367    
;;;368    __task void AppTaskAtmos(void)
000000  bf00              NOP      
;;;369    {
;;;370    	const uint16_t usMaxBlockTime = 400; 	 
;;;371    	
;;;372    	OS_RESULT xResult;	
;;;373    	
;;;374        while(1)
000002  e015              B        |L1.48|
                  |L1.4|
;;;375        {
;;;376    		xResult = os_evt_wait_or (ATOS_BIT_0, usMaxBlockTime);
000004  2200              MOVS     r2,#0
000006  f44f71c8          MOV      r1,#0x190
00000a  2001              MOVS     r0,#1
00000c  f8dfc024          LDR      r12,|L1.52|
000010  df00              SVC      #0x0
000012  4604              MOV      r4,r0
;;;377    		
;;;378    		switch (xResult)
000014  2c01              CMP      r4,#1
000016  d002              BEQ      |L1.30|
000018  2c02              CMP      r4,#2
00001a  d101              BNE      |L1.32|
;;;379    		{
;;;380    			case OS_R_EVT:
;;;381    				
;;;382    			    #if DUSE_DEBUG_OUTPUT == 1
;;;383    					printf("接收到采集气压事件\r\n");
;;;384    				#endif
;;;385    				break;	
00001c  e001              B        |L1.34|
                  |L1.30|
;;;386    
;;;387    			case OS_R_TMO:
;;;388    				
;;;389    			    #if DUSE_DEBUG_OUTPUT == 1
;;;390    					printf("采集气压事件超时\r\n");
;;;391    				#endif	
;;;392    				
;;;393    				break;
00001e  e000              B        |L1.34|
                  |L1.32|
;;;394    			
;;;395    			default:                     
;;;396    				break;
000020  bf00              NOP      
                  |L1.34|
000022  bf00              NOP                            ;385
;;;397    		}			
;;;398    		
;;;399    
;;;400    		//计算1分钟均值、海平面气压
;;;401    
;;;402    		os_evt_set(IWDG_BIT_4, HandleTaskWdg);
000024  4804              LDR      r0,|L1.56|
000026  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000028  2010              MOVS     r0,#0x10
00002a  f8dfc010          LDR      r12,|L1.60|
00002e  df00              SVC      #0x0
                  |L1.48|
000030  e7e8              B        |L1.4|
;;;403    	}
;;;404    }
;;;405    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      rt_evt_wait
                  |L1.56|
                          DCD      HandleTaskWdg
                  |L1.60|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskComm||, CODE, READONLY, ALIGN=2

                  AppTaskComm PROC
;;;224    
;;;225    __task void AppTaskComm(void)
000000  e00a              B        |L2.24|
                  |L2.2|
;;;226    {
;;;227        while(1)
;;;228        {
;;;229    		os_dly_wait(500);
000002  f44f70fa          MOV      r0,#0x1f4
000006  f8dfc014          LDR      r12,|L2.28|
00000a  df00              SVC      #0x0
;;;230    		
;;;231    		/* 发送事件标志，表示任务正常运行 */
;;;232    		os_evt_set(IWDG_BIT_6, HandleTaskWdg);
00000c  4804              LDR      r0,|L2.32|
00000e  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000010  2040              MOVS     r0,#0x40
000012  f8dfc010          LDR      r12,|L2.36|
000016  df00              SVC      #0x0
                  |L2.24|
000018  e7f3              B        |L2.2|
;;;233        }	
;;;234    }
;;;235    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      rt_dly_wait
                  |L2.32|
                          DCD      HandleTaskWdg
                  |L2.36|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;696    */
;;;697    static void AppTaskCreate (void)
000000  2300              MOVS     r3,#0
;;;698    {
;;;699    	
;;;700    
;;;701    	//采集电源状态任务
;;;702    	HandleTaskSTA    = os_tsk_create_user(	AppTaskSTA,              	
000002  4a30              LDR      r2,|L3.196|
000004  4930              LDR      r1,|L3.200|
000006  4831              LDR      r0,|L3.204|
000008  f8dfc0c4          LDR      r12,|L3.208|
00000c  df00              SVC      #0x0
00000e  4931              LDR      r1,|L3.212|
000010  6008              STR      r0,[r1,#0]  ; HandleTaskSTA
;;;703    											1,                       	
;;;704    											&AppTaskSTAStk,          	
;;;705    											sizeof(AppTaskSTAStk));  	
;;;706    	
;;;707    	HandleTaskMsgPro = os_tsk_create_user(	AppTaskMsgPro,            	
000012  2300              MOVS     r3,#0
000014  4a30              LDR      r2,|L3.216|
000016  f04f1102          MOV      r1,#0x20002
00001a  4830              LDR      r0,|L3.220|
00001c  f8dfc0b0          LDR      r12,|L3.208|
000020  df00              SVC      #0x0
000022  492f              LDR      r1,|L3.224|
000024  6008              STR      r0,[r1,#0]  ; HandleTaskMsgPro
;;;708    											2,                      	
;;;709    											&AppTaskMsgProStk,       	
;;;710    											sizeof(AppTaskMsgProStk)); 	
;;;711    	//数据采集任务：风速、风向、降雨量
;;;712    	HandleTaskDAQ    = os_tsk_create_user(	AppTaskDAQ,             	
000026  2300              MOVS     r3,#0
000028  4a2e              LDR      r2,|L3.228|
00002a  4927              LDR      r1,|L3.200|
00002c  1c89              ADDS     r1,r1,#2
00002e  482e              LDR      r0,|L3.232|
000030  f8dfc09c          LDR      r12,|L3.208|
000034  df00              SVC      #0x0
000036  492d              LDR      r1,|L3.236|
000038  6008              STR      r0,[r1,#0]  ; HandleTaskDAQ
;;;713    											3,                         
;;;714    											&AppTaskDAQStk,         	
;;;715    											sizeof(AppTaskDAQStk)); 	
;;;716    	
;;;717    	//温湿度采集任务
;;;718    	HandleTaskHumit  = os_tsk_create_user(	AppTaskHumit,                
00003a  2300              MOVS     r3,#0
00003c  4a2c              LDR      r2,|L3.240|
00003e  492d              LDR      r1,|L3.244|
000040  482d              LDR      r0,|L3.248|
000042  f8dfc08c          LDR      r12,|L3.208|
000046  df00              SVC      #0x0
000048  492c              LDR      r1,|L3.252|
00004a  6008              STR      r0,[r1,#0]  ; HandleTaskHumit
;;;719    											4,                         
;;;720    											&AppTaskHumitStk,            
;;;721    											sizeof(AppTaskHumitStk));  
;;;722    	//气压采集任务										
;;;723    	HandleTaskAtmos  = os_tsk_create_user(	AppTaskAtmos,                
00004c  2300              MOVS     r3,#0
00004e  4a2c              LDR      r2,|L3.256|
000050  4928              LDR      r1,|L3.244|
000052  1c49              ADDS     r1,r1,#1
000054  482b              LDR      r0,|L3.260|
000056  f8dfc078          LDR      r12,|L3.208|
00005a  df00              SVC      #0x0
00005c  492a              LDR      r1,|L3.264|
00005e  6008              STR      r0,[r1,#0]  ; HandleTaskAtmos
;;;724    											5,                         
;;;725    											&AppTaskAtmosStk,            
;;;726    											sizeof(AppTaskAtmosStk));  
;;;727    		//水温采集任务									
;;;728    	HandleTaskWaterTemp  = os_tsk_create_user(	AppTaskWaterTemp,                
000060  2300              MOVS     r3,#0
000062  4a2a              LDR      r2,|L3.268|
000064  4923              LDR      r1,|L3.244|
000066  1c89              ADDS     r1,r1,#2
000068  4829              LDR      r0,|L3.272|
00006a  f8dfc064          LDR      r12,|L3.208|
00006e  df00              SVC      #0x0
000070  4928              LDR      r1,|L3.276|
000072  6008              STR      r0,[r1,#0]  ; HandleTaskWaterTemp
;;;729    											6,                         
;;;730    											&AppTaskWaterTempStk,            
;;;731    											sizeof(AppTaskWaterTempStk));
;;;732    	
;;;733    	//外部通信任务
;;;734    	HandleTaskComm   = os_tsk_create_user(	AppTaskComm,               
000074  2300              MOVS     r3,#0
000076  4a28              LDR      r2,|L3.280|
000078  4928              LDR      r1,|L3.284|
00007a  4829              LDR      r0,|L3.288|
00007c  f8dfc050          LDR      r12,|L3.208|
000080  df00              SVC      #0x0
000082  4928              LDR      r1,|L3.292|
000084  6008              STR      r0,[r1,#0]  ; HandleTaskComm
;;;735    											7,                         
;;;736    											&AppTaskCommStk,           
;;;737    											sizeof(AppTaskCommStk));   
;;;738    	
;;;739    	//外部控制任务										
;;;740    	HandleTaskCtl    = os_tsk_create_user(	AppTaskCtl,                
000086  2300              MOVS     r3,#0
000088  4a27              LDR      r2,|L3.296|
00008a  490f              LDR      r1,|L3.200|
00008c  1dc9              ADDS     r1,r1,#7
00008e  4827              LDR      r0,|L3.300|
000090  f8dfc03c          LDR      r12,|L3.208|
000094  df00              SVC      #0x0
000096  4926              LDR      r1,|L3.304|
000098  6008              STR      r0,[r1,#0]  ; HandleTaskCtl
;;;741    											8,                         
;;;742    											&AppTaskCtlStk,            
;;;743    											sizeof(AppTaskCtlStk));
;;;744    	//潮高采集任务
;;;745    	HandleTaskGauge  = os_tsk_create_user(	AppTaskGauge,             	
00009a  2300              MOVS     r3,#0
00009c  4a25              LDR      r2,|L3.308|
00009e  4915              LDR      r1,|L3.244|
0000a0  1d49              ADDS     r1,r1,#5
0000a2  4825              LDR      r0,|L3.312|
0000a4  f8dfc028          LDR      r12,|L3.208|
0000a8  df00              SVC      #0x0
0000aa  4924              LDR      r1,|L3.316|
0000ac  6008              STR      r0,[r1,#0]  ; HandleTaskGauge
;;;746    											9,                         
;;;747    											&AppTaskGaugeStk,         	
;;;748    											sizeof(AppTaskGaugeStk)); 
;;;749    	//看门狗任务
;;;750    	HandleTaskWdg    = os_tsk_create_user(	AppTaskWdg,                
0000ae  2300              MOVS     r3,#0
0000b0  4a23              LDR      r2,|L3.320|
0000b2  4924              LDR      r1,|L3.324|
0000b4  4824              LDR      r0,|L3.328|
0000b6  f8dfc018          LDR      r12,|L3.208|
0000ba  df00              SVC      #0x0
0000bc  4923              LDR      r1,|L3.332|
0000be  6008              STR      r0,[r1,#0]  ; HandleTaskWdg
;;;751    											10,                         
;;;752    											&AppTaskWdgStk,            
;;;753    											sizeof(AppTaskWdgStk));
;;;754    }
0000c0  4770              BX       lr
;;;755    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L3.196|
                          DCD      AppTaskSTAStk
                  |L3.200|
                          DCD      0x00020001
                  |L3.204|
                          DCD      AppTaskSTA
                  |L3.208|
                          DCD      rt_tsk_create
                  |L3.212|
                          DCD      HandleTaskSTA
                  |L3.216|
                          DCD      AppTaskMsgProStk
                  |L3.220|
                          DCD      AppTaskMsgPro
                  |L3.224|
                          DCD      HandleTaskMsgPro
                  |L3.228|
                          DCD      AppTaskDAQStk
                  |L3.232|
                          DCD      AppTaskDAQ
                  |L3.236|
                          DCD      HandleTaskDAQ
                  |L3.240|
                          DCD      AppTaskHumitStk
                  |L3.244|
                          DCD      0x00080004
                  |L3.248|
                          DCD      AppTaskHumit
                  |L3.252|
                          DCD      HandleTaskHumit
                  |L3.256|
                          DCD      AppTaskAtmosStk
                  |L3.260|
                          DCD      AppTaskAtmos
                  |L3.264|
                          DCD      HandleTaskAtmos
                  |L3.268|
                          DCD      AppTaskWaterTempStk
                  |L3.272|
                          DCD      AppTaskWaterTemp
                  |L3.276|
                          DCD      HandleTaskWaterTemp
                  |L3.280|
                          DCD      AppTaskCommStk
                  |L3.284|
                          DCD      0x00100007
                  |L3.288|
                          DCD      AppTaskComm
                  |L3.292|
                          DCD      HandleTaskComm
                  |L3.296|
                          DCD      AppTaskCtlStk
                  |L3.300|
                          DCD      AppTaskCtl
                  |L3.304|
                          DCD      HandleTaskCtl
                  |L3.308|
                          DCD      AppTaskGaugeStk
                  |L3.312|
                          DCD      AppTaskGauge
                  |L3.316|
                          DCD      HandleTaskGauge
                  |L3.320|
                          DCD      AppTaskWdgStk
                  |L3.324|
                          DCD      0x0001000a
                  |L3.328|
                          DCD      AppTaskWdg
                  |L3.332|
                          DCD      HandleTaskWdg

                          AREA ||i.AppTaskCtl||, CODE, READONLY, ALIGN=2

                  AppTaskCtl PROC
;;;678    
;;;679    __task void AppTaskCtl(void)
000000  e009              B        |L4.22|
                  |L4.2|
;;;680    {
;;;681        while(1)
;;;682        {
;;;683    		os_dly_wait(91);
000002  205b              MOVS     r0,#0x5b
000004  f8dfc010          LDR      r12,|L4.24|
000008  df00              SVC      #0x0
;;;684        
;;;685    		os_evt_set(IWDG_BIT_7, HandleTaskWdg);
00000a  4804              LDR      r0,|L4.28|
00000c  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
00000e  2080              MOVS     r0,#0x80
000010  f8dfc00c          LDR      r12,|L4.32|
000014  df00              SVC      #0x0
                  |L4.22|
000016  e7f4              B        |L4.2|
;;;686    	}
;;;687    }
;;;688    
                          ENDP

                  |L4.24|
                          DCD      rt_dly_wait
                  |L4.28|
                          DCD      HandleTaskWdg
                  |L4.32|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskDAQ||, CODE, READONLY, ALIGN=2

                  AppTaskDAQ PROC
;;;644    
;;;645    __task void AppTaskDAQ(void)
000000  e009              B        |L5.22|
                  |L5.2|
;;;646    {
;;;647        while(1)
;;;648        {
;;;649            os_dly_wait(10);
000002  200a              MOVS     r0,#0xa
000004  f8dfc010          LDR      r12,|L5.24|
000008  df00              SVC      #0x0
;;;650    		
;;;651    		os_evt_set(IWDG_BIT_2, HandleTaskWdg);
00000a  4804              LDR      r0,|L5.28|
00000c  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
00000e  2004              MOVS     r0,#4
000010  f8dfc00c          LDR      r12,|L5.32|
000014  df00              SVC      #0x0
                  |L5.22|
000016  e7f4              B        |L5.2|
;;;652        }
;;;653    }
;;;654    
                          ENDP

                  |L5.24|
                          DCD      rt_dly_wait
                  |L5.28|
                          DCD      HandleTaskWdg
                  |L5.32|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskGauge||, CODE, READONLY, ALIGN=2

                  AppTaskGauge PROC
;;;537    
;;;538    __task void AppTaskGauge(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;539    {
;;;540    	OS_RESULT xResult;	
;;;541    	
;;;542    	vu8  i,ret_flags = 0,ret;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;543    	
;;;544    	const uint16_t usMaxBlockTime = 400; 
000006  bf00              NOP      
;;;545    	
;;;546        while(1)
000008  e09e              B        |L6.328|
                  |L6.10|
;;;547        {
;;;548    		xResult = os_evt_wait_or (GAUG_BIT_ALL, usMaxBlockTime);
00000a  2200              MOVS     r2,#0
00000c  f44f71c8          MOV      r1,#0x190
000010  2007              MOVS     r0,#7
000012  f8dfc138          LDR      r12,|L6.332|
000016  df00              SVC      #0x0
000018  4604              MOV      r4,r0
;;;549    
;;;550    		//上电后第一次发送读取液位传感器序列号的命令，收到06语句后解析。TIM2每3秒进行一次任务回调，发送一次读取数据命令，然后收到86命令，然后解析出长度。
;;;551    		switch (xResult)
00001a  2c01              CMP      r4,#1
00001c  d07c              BEQ      |L6.280|
00001e  2c02              CMP      r4,#2
000020  d179              BNE      |L6.278|
;;;552    		{
;;;553    			case OS_R_EVT:
;;;554    				
;;;555    				ret_flags = os_evt_get();
000022  f8dfc12c          LDR      r12,|L6.336|
000026  df00              SVC      #0x0
000028  b2c0              UXTB     r0,r0
00002a  9000              STR      r0,[sp,#0]
;;;556    				bsp_Led1Toggle();
00002c  f7fffffe          BL       bsp_Led1Toggle
;;;557    				if(ret_flags == GAUG_BIT_0)
000030  f89d0000          LDRB     r0,[sp,#0]
000034  2801              CMP      r0,#1
000036  d140              BNE      |L6.186|
;;;558    				{
;;;559    					if(Cmd_Type == 0x02)	//Cmd_Type == 0x02时是第一次读数，当第一次会先读传感器的序列号
000038  4846              LDR      r0,|L6.340|
00003a  7800              LDRB     r0,[r0,#0]  ; Cmd_Type
00003c  2802              CMP      r0,#2
00003e  d12b              BNE      |L6.152|
;;;560    					{
;;;561    						printf("1\r\n");
000040  a045              ADR      r0,|L6.344|
000042  f7fffffe          BL       __2printf
;;;562    						for(i=0;i<32;i++)
000046  2000              MOVS     r0,#0
000048  9001              STR      r0,[sp,#4]
00004a  e010              B        |L6.110|
                  |L6.76|
;;;563    						{
;;;564    							os_evt_set(IWDG_BIT_8, HandleTaskWdg);
00004c  4843              LDR      r0,|L6.348|
00004e  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000050  f44f7080          MOV      r0,#0x100
000054  f8dfc108          LDR      r12,|L6.352|
000058  df00              SVC      #0x0
;;;565    							os_dly_wait(500);  // 雷达液位需要初始化，期间不能发命令读数，否则会导致雷达液位出BUG。所以第一次读数延迟10秒
00005a  f44f70fa          MOV      r0,#0x1f4
00005e  f8dfc104          LDR      r12,|L6.356|
000062  df00              SVC      #0x0
000064  f89d0004          LDRB     r0,[sp,#4]            ;562
000068  1c40              ADDS     r0,r0,#1              ;562
00006a  b2c0              UXTB     r0,r0                 ;562
00006c  9001              STR      r0,[sp,#4]            ;562
                  |L6.110|
00006e  f89d0004          LDRB     r0,[sp,#4]            ;562
000072  2820              CMP      r0,#0x20              ;562
000074  dbea              BLT      |L6.76|
;;;566    						}
;;;567    						i=0;		
000076  2000              MOVS     r0,#0
000078  9001              STR      r0,[sp,#4]
;;;568    						printf("2\r\n");						
00007a  a03b              ADR      r0,|L6.360|
00007c  f7fffffe          BL       __2printf
;;;569    						wait_time_gauge =0;													
000080  2000              MOVS     r0,#0
000082  493a              LDR      r1,|L6.364|
000084  6008              STR      r0,[r1,#0]  ; wait_time_gauge
;;;570    						r_485_port = R_485_Ctrl(0x02);						
000086  2002              MOVS     r0,#2
000088  f7fffffe          BL       R_485_Ctrl
00008c  4938              LDR      r1,|L6.368|
00008e  7008              STRB     r0,[r1,#0]
;;;571    						Read_From_Gauge(0x01);						
000090  2001              MOVS     r0,#1
000092  f7fffffe          BL       Read_From_Gauge
000096  e010              B        |L6.186|
                  |L6.152|
;;;572    					}
;;;573    					else
;;;574    					if(Cmd_Type == 0x06)
000098  482e              LDR      r0,|L6.340|
00009a  7800              LDRB     r0,[r0,#0]  ; Cmd_Type
00009c  2806              CMP      r0,#6
00009e  d10c              BNE      |L6.186|
;;;575    					{
;;;576    						Analyze_Gauge(0x06);    
0000a0  f7fffffe          BL       Analyze_Gauge
;;;577    						wait_time_gauge =0;
0000a4  2000              MOVS     r0,#0
0000a6  4931              LDR      r1,|L6.364|
0000a8  6008              STR      r0,[r1,#0]  ; wait_time_gauge
;;;578    						r_485_port = R_485_Ctrl(0x02);
0000aa  2002              MOVS     r0,#2
0000ac  f7fffffe          BL       R_485_Ctrl
0000b0  492f              LDR      r1,|L6.368|
0000b2  7008              STRB     r0,[r1,#0]
;;;579    						Read_From_Gauge(0x02);						
0000b4  2002              MOVS     r0,#2
0000b6  f7fffffe          BL       Read_From_Gauge
                  |L6.186|
;;;580    					}					
;;;581    					
;;;582    				}
;;;583    				
;;;584    				if(ret_flags == GAUG_BIT_1)
0000ba  f89d0000          LDRB     r0,[sp,#0]
0000be  2802              CMP      r0,#2
0000c0  d127              BNE      |L6.274|
;;;585    				{
;;;586    
;;;587    					if(Cmd_Type == 0x06)
0000c2  4824              LDR      r0,|L6.340|
0000c4  7800              LDRB     r0,[r0,#0]  ; Cmd_Type
0000c6  2806              CMP      r0,#6
0000c8  d10c              BNE      |L6.228|
;;;588    					{
;;;589    					
;;;590    						Analyze_Gauge(0x06);
0000ca  f7fffffe          BL       Analyze_Gauge
;;;591    						printf("4\r\n");
0000ce  a029              ADR      r0,|L6.372|
0000d0  f7fffffe          BL       __2printf
;;;592    						r_485_port = R_485_Ctrl(0x02);
0000d4  2002              MOVS     r0,#2
0000d6  f7fffffe          BL       R_485_Ctrl
0000da  4925              LDR      r1,|L6.368|
0000dc  7008              STRB     r0,[r1,#0]
;;;593    						Read_From_Gauge(0x02);						
0000de  2002              MOVS     r0,#2
0000e0  f7fffffe          BL       Read_From_Gauge
                  |L6.228|
;;;594    					}
;;;595    					
;;;596    					if(Cmd_Type == 0x86)
0000e4  481b              LDR      r0,|L6.340|
0000e6  7800              LDRB     r0,[r0,#0]  ; Cmd_Type
0000e8  2886              CMP      r0,#0x86
0000ea  d112              BNE      |L6.274|
;;;597    					{
;;;598    
;;;599    						Analyze_Gauge(0x86);
0000ec  f7fffffe          BL       Analyze_Gauge
;;;600    						printf("5\r\n");
0000f0  a021              ADR      r0,|L6.376|
0000f2  f7fffffe          BL       __2printf
;;;601    						r_485_port = R_485_Ctrl(0x00);
0000f6  2000              MOVS     r0,#0
0000f8  f7fffffe          BL       R_485_Ctrl
0000fc  491c              LDR      r1,|L6.368|
0000fe  7008              STRB     r0,[r1,#0]
;;;602    						
;;;603    						Cmd_Type = 0xC1;
000100  20c1              MOVS     r0,#0xc1
000102  4914              LDR      r1,|L6.340|
000104  7008              STRB     r0,[r1,#0]
;;;604    						os_evt_set (HUMI_BIT_0, HandleTaskHumit);
000106  481d              LDR      r0,|L6.380|
000108  6801              LDR      r1,[r0,#0]  ; HandleTaskHumit
00010a  2001              MOVS     r0,#1
00010c  f8dfc050          LDR      r12,|L6.352|
000110  df00              SVC      #0x0
                  |L6.274|
;;;605    					}					
;;;606    					
;;;607    				}
;;;608    			
;;;609    //				if(stop_wdg_flag == 0)
;;;610    //					IWDG_ReloadCounter();
;;;611    				
;;;612    				break;	
000112  e011              B        |L6.312|
000114  e000              B        |L6.280|
                  |L6.278|
000116  e00e              B        |L6.310|
                  |L6.280|
;;;613    
;;;614    			case OS_R_TMO:
;;;615    				
;;;616    			    r_485_port = R_485_Ctrl(0x00);
000118  2000              MOVS     r0,#0
00011a  f7fffffe          BL       R_485_Ctrl
00011e  4914              LDR      r1,|L6.368|
000120  7008              STRB     r0,[r1,#0]
;;;617    				Cmd_Type = 0xC1;
000122  20c1              MOVS     r0,#0xc1
000124  490b              LDR      r1,|L6.340|
000126  7008              STRB     r0,[r1,#0]
;;;618    				os_evt_set (HUMI_BIT_0, HandleTaskHumit);
000128  4814              LDR      r0,|L6.380|
00012a  6801              LDR      r1,[r0,#0]  ; HandleTaskHumit
00012c  2001              MOVS     r0,#1
00012e  f8dfc030          LDR      r12,|L6.352|
000132  df00              SVC      #0x0
;;;619    		
;;;620    				break;
000134  e000              B        |L6.312|
                  |L6.310|
;;;621    			
;;;622    			default:                     
;;;623    				break;
000136  bf00              NOP      
                  |L6.312|
000138  bf00              NOP                            ;612
;;;624    		}
;;;625    		
;;;626    
;;;627    		//计算1分钟均值
;;;628    		
;;;629    		os_evt_set(IWDG_BIT_8, HandleTaskWdg);
00013a  4808              LDR      r0,|L6.348|
00013c  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
00013e  f44f7080          MOV      r0,#0x100
000142  f8dfc01c          LDR      r12,|L6.352|
000146  df00              SVC      #0x0
                  |L6.328|
000148  e75f              B        |L6.10|
;;;630    		
;;;631    	
;;;632        }
;;;633    }
;;;634    
                          ENDP

00014a  0000              DCW      0x0000
                  |L6.332|
                          DCD      rt_evt_wait
                  |L6.336|
                          DCD      rt_evt_get
                  |L6.340|
                          DCD      Cmd_Type
                  |L6.344|
000158  310d0a00          DCB      "1\r\n",0
                  |L6.348|
                          DCD      HandleTaskWdg
                  |L6.352|
                          DCD      rt_evt_set
                  |L6.356|
                          DCD      rt_dly_wait
                  |L6.360|
000168  320d0a00          DCB      "2\r\n",0
                  |L6.364|
                          DCD      wait_time_gauge
                  |L6.368|
                          DCD      r_485_port
                  |L6.372|
000174  340d0a00          DCB      "4\r\n",0
                  |L6.376|
000178  350d0a00          DCB      "5\r\n",0
                  |L6.380|
                          DCD      HandleTaskHumit

                          AREA ||i.AppTaskHumit||, CODE, READONLY, ALIGN=2

                  AppTaskHumit PROC
;;;454    	
;;;455    __task void AppTaskHumit(void)
000000  bf00              NOP      
;;;456    {
;;;457    	const uint16_t usMaxBlockTime = 400; 	 
;;;458    	
;;;459    	OS_RESULT xResult;	
;;;460    	
;;;461    	u16 ret_flags = 0x0000;
000002  2500              MOVS     r5,#0
;;;462    	
;;;463        while(1)
000004  e033              B        |L7.110|
                  |L7.6|
;;;464        {
;;;465    		xResult = os_evt_wait_or (HUMI_BIT_ALL, usMaxBlockTime);
000006  2200              MOVS     r2,#0
000008  f44f71c8          MOV      r1,#0x190
00000c  2003              MOVS     r0,#3
00000e  f8dfc060          LDR      r12,|L7.112|
000012  df00              SVC      #0x0
000014  4604              MOV      r4,r0
;;;466    		
;;;467    		switch (xResult)
000016  2c01              CMP      r4,#1
000018  d01b              BEQ      |L7.82|
00001a  2c02              CMP      r4,#2
00001c  d11f              BNE      |L7.94|
;;;468    		{
;;;469    			case OS_R_EVT:
;;;470    				
;;;471    			    #if DUSE_DEBUG_OUTPUT == 1
;;;472    					printf("接收到温湿度事件\r\n");
;;;473    				#endif
;;;474    			
;;;475    				ret_flags = os_evt_get ();
00001e  f8dfc054          LDR      r12,|L7.116|
000022  df00              SVC      #0x0
000024  4605              MOV      r5,r0
;;;476    			
;;;477    				if(ret_flags == HUMI_BIT_0)
000026  2d01              CMP      r5,#1
000028  d10a              BNE      |L7.64|
;;;478    				{
;;;479    					if(Cmd_Type == 0xC1)
00002a  4813              LDR      r0,|L7.120|
00002c  7800              LDRB     r0,[r0,#0]  ; Cmd_Type
00002e  28c1              CMP      r0,#0xc1
000030  d106              BNE      |L7.64|
;;;480    					{
;;;481    						r_485_port = R_485_Ctrl(0x02);
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       R_485_Ctrl
000038  4910              LDR      r1,|L7.124|
00003a  7008              STRB     r0,[r1,#0]
;;;482    						Read_From_WSD();
00003c  f7fffffe          BL       Read_From_WSD
                  |L7.64|
;;;483    					}
;;;484    				}
;;;485    				
;;;486    				if(ret_flags == HUMI_BIT_1)
000040  2d02              CMP      r5,#2
000042  d105              BNE      |L7.80|
;;;487    				{
;;;488    					if(Cmd_Type == 0x41)
000044  480c              LDR      r0,|L7.120|
000046  7800              LDRB     r0,[r0,#0]  ; Cmd_Type
000048  2841              CMP      r0,#0x41
00004a  d101              BNE      |L7.80|
;;;489    					{
;;;490    						Analyze_Humit();
00004c  f7fffffe          BL       Analyze_Humit
                  |L7.80|
;;;491    					}
;;;492    					
;;;493    				}
;;;494    			
;;;495    				//IWDG_ReloadCounter();
;;;496    				break;	
000050  e006              B        |L7.96|
                  |L7.82|
;;;497    
;;;498    			case OS_R_TMO:
;;;499    				
;;;500    			    r_485_port = R_485_Ctrl(0x00);
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       R_485_Ctrl
000058  4908              LDR      r1,|L7.124|
00005a  7008              STRB     r0,[r1,#0]
;;;501    
;;;502    			
;;;503    				#if DUSE_DEBUG_OUTPUT == 1
;;;504    					printf("采集温湿度事件超时\r\n");
;;;505    				#endif	
;;;506    				
;;;507    				break;
00005c  e000              B        |L7.96|
                  |L7.94|
;;;508    			
;;;509    			default:                     
;;;510    				break;
00005e  bf00              NOP      
                  |L7.96|
000060  bf00              NOP                            ;496
;;;511    		}			
;;;512    		
;;;513    
;;;514    		//计算1分钟均值
;;;515    
;;;516    		os_evt_set(IWDG_BIT_3, HandleTaskWdg);
000062  4807              LDR      r0,|L7.128|
000064  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000066  2008              MOVS     r0,#8
000068  f8dfc018          LDR      r12,|L7.132|
00006c  df00              SVC      #0x0
                  |L7.110|
00006e  e7ca              B        |L7.6|
;;;517    	}
;;;518    }
;;;519    
                          ENDP

                  |L7.112|
                          DCD      rt_evt_wait
                  |L7.116|
                          DCD      rt_evt_get
                  |L7.120|
                          DCD      Cmd_Type
                  |L7.124|
                          DCD      r_485_port
                  |L7.128|
                          DCD      HandleTaskWdg
                  |L7.132|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskMsgPro||, CODE, READONLY, ALIGN=1

                  AppTaskMsgPro PROC
;;;173    
;;;174    __task void AppTaskMsgPro(void)
000000  e001              B        |L8.6|
                  |L8.2|
;;;175    {
;;;176        while(1)
;;;177        {
;;;178    		Process_Host_Message();		
000002  f7fffffe          BL       Process_Host_Message
                  |L8.6|
000006  e7fc              B        |L8.2|
;;;179        }
;;;180    }
;;;181    
                          ENDP


                          AREA ||i.AppTaskSTA||, CODE, READONLY, ALIGN=2

                  AppTaskSTA PROC
;;;322    
;;;323    __task void AppTaskSTA(void)
000000  bf00              NOP      
;;;324    {
;;;325    	const uint16_t usMaxBlockTime = 500; 	 
;;;326    	
;;;327    	OS_RESULT xResult;	
;;;328    	
;;;329        while(1)
000002  e01c              B        |L9.62|
                  |L9.4|
;;;330        {
;;;331    		xResult = os_evt_wait_or (STATE_BIT_0, usMaxBlockTime);
000004  2200              MOVS     r2,#0
000006  f44f71fa          MOV      r1,#0x1f4
00000a  2001              MOVS     r0,#1
00000c  f8dfc030          LDR      r12,|L9.64|
000010  df00              SVC      #0x0
000012  4604              MOV      r4,r0
;;;332    		
;;;333    		switch (xResult)
000014  2c01              CMP      r4,#1
000016  d002              BEQ      |L9.30|
000018  2c02              CMP      r4,#2
00001a  d101              BNE      |L9.32|
;;;334    		{
;;;335    			case OS_R_EVT:
;;;336    				
;;;337    				break;	
00001c  e001              B        |L9.34|
                  |L9.30|
;;;338    
;;;339    			case OS_R_TMO:
;;;340    				break;
00001e  e000              B        |L9.34|
                  |L9.32|
;;;341    			default:                     
;;;342    				break;
000020  bf00              NOP      
                  |L9.34|
000022  bf00              NOP                            ;337
;;;343    		}	
;;;344            os_dly_wait(500);
000024  f44f70fa          MOV      r0,#0x1f4
000028  f8dfc018          LDR      r12,|L9.68|
00002c  df00              SVC      #0x0
;;;345    		bsp_Led3Toggle();
00002e  f7fffffe          BL       bsp_Led3Toggle
;;;346    		
;;;347    		os_evt_set(IWDG_BIT_0, HandleTaskWdg);
000032  4805              LDR      r0,|L9.72|
000034  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000036  2001              MOVS     r0,#1
000038  f8dfc010          LDR      r12,|L9.76|
00003c  df00              SVC      #0x0
                  |L9.62|
00003e  e7e1              B        |L9.4|
;;;348    		
;;;349        }	
;;;350    }
;;;351    
                          ENDP

                  |L9.64|
                          DCD      rt_evt_wait
                  |L9.68|
                          DCD      rt_dly_wait
                  |L9.72|
                          DCD      HandleTaskWdg
                  |L9.76|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=2

                  AppTaskStart PROC
;;;190    */
;;;191    __task void AppTaskStart(void)
000000  f7fffffe          BL       AppTaskCreate
;;;192    {
;;;193    
;;;194    	AppTaskCreate();
;;;195    	
;;;196        while(1)
000004  e009              B        |L10.26|
                  |L10.6|
;;;197        {
;;;198    		os_dly_wait(10);
000006  200a              MOVS     r0,#0xa
000008  f8dfc010          LDR      r12,|L10.28|
00000c  df00              SVC      #0x0
;;;199    		
;;;200    		os_evt_set(IWDG_BIT_5, HandleTaskWdg);
00000e  4804              LDR      r0,|L10.32|
000010  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000012  2020              MOVS     r0,#0x20
000014  f8dfc00c          LDR      r12,|L10.36|
000018  df00              SVC      #0x0
                  |L10.26|
00001a  e7f4              B        |L10.6|
;;;201        }
;;;202    }
;;;203    
                          ENDP

                  |L10.28|
                          DCD      rt_dly_wait
                  |L10.32|
                          DCD      HandleTaskWdg
                  |L10.36|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskWaterTemp||, CODE, READONLY, ALIGN=1

                  AppTaskWaterTemp PROC
;;;418    */
;;;419    __task void AppTaskWaterTemp(void)
000000  de00              DCI      0xde00 ; ? Architecturally Undefined
;;;420    {
;;;421    
;;;422    }
;;;423    
                          ENDP


                          AREA ||i.AppTaskWdg||, CODE, READONLY, ALIGN=2

                  AppTaskWdg PROC
;;;770    
;;;771    __task void AppTaskWdg(void)
000000  bf00              NOP      
;;;772    {
;;;773    
;;;774    	OS_RESULT xResult;	
;;;775    	
;;;776    	const uint16_t usMaxBlockTime = 1000; 
;;;777    	
;;;778        while(1)
000002  e012              B        |L12.42|
                  |L12.4|
;;;779        {
;;;780    		xResult = os_evt_wait_and (IWDG_BIT_ALL, usMaxBlockTime);
000004  2201              MOVS     r2,#1
000006  f44f717a          MOV      r1,#0x3e8
00000a  f44f7081          MOV      r0,#0x102
00000e  f8dfc01c          LDR      r12,|L12.44|
000012  df00              SVC      #0x0
000014  4604              MOV      r4,r0
;;;781    		
;;;782    		switch (xResult)
000016  2c02              CMP      r4,#2
000018  d105              BNE      |L12.38|
;;;783    		{
;;;784    			case OS_R_EVT:
;;;785    				
;;;786    				if(stop_wdg_flag == 0)
00001a  4805              LDR      r0,|L12.48|
00001c  7800              LDRB     r0,[r0,#0]  ; stop_wdg_flag
00001e  b908              CBNZ     r0,|L12.36|
;;;787    					IWDG_ReloadCounter();
000020  f7fffffe          BL       IWDG_ReloadCounter
                  |L12.36|
;;;788    			
;;;789    				break;	
000024  e000              B        |L12.40|
                  |L12.38|
;;;790    			
;;;791    			default:                     
;;;792    				break;
000026  bf00              NOP      
                  |L12.40|
000028  bf00              NOP                            ;789
                  |L12.42|
00002a  e7eb              B        |L12.4|
;;;793    		}	
;;;794        }	
;;;795    }
;;;796    
                          ENDP

                  |L12.44|
                          DCD      rt_evt_wait
                  |L12.48|
                          DCD      stop_wdg_flag

                          AREA ||i.Fun_CallBack1||, CODE, READONLY, ALIGN=2

                  Fun_CallBack1 PROC
;;;263    
;;;264    void Fun_CallBack1(void)
000000  4803              LDR      r0,|L13.16|
;;;265    {
;;;266    	os_evt_set (GAUG_BIT_0, HandleTaskGauge);
000002  6801              LDR      r1,[r0,#0]  ; HandleTaskGauge
000004  2001              MOVS     r0,#1
000006  f8dfc00c          LDR      r12,|L13.20|
00000a  df00              SVC      #0x0
;;;267    }
00000c  4770              BX       lr
;;;268    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      HandleTaskGauge
                  |L13.20|
                          DCD      rt_evt_set

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;807    
;;;808    void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;809    {
;;;810    	vu8 i;
;;;811    	
;;;812    	if (RTC_GetITStatus(RTC_IT_SEC) != RESET)
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RTC_GetITStatus
000008  b308              CBZ      r0,|L14.78|
;;;813    	{
;;;814    		RTC_ClearITPendingBit(RTC_IT_SEC);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       RTC_ClearITPendingBit
;;;815    		
;;;816    		
;;;817    		timer0++;
000010  480f              LDR      r0,|L14.80|
000012  6800              LDR      r0,[r0,#0]  ; timer0
000014  1c40              ADDS     r0,r0,#1
000016  490e              LDR      r1,|L14.80|
000018  6008              STR      r0,[r1,#0]  ; timer0
;;;818    		
;;;819    		timer1++;
00001a  480e              LDR      r0,|L14.84|
00001c  6800              LDR      r0,[r0,#0]  ; timer1
00001e  1c40              ADDS     r0,r0,#1
000020  490c              LDR      r1,|L14.84|
000022  6008              STR      r0,[r1,#0]  ; timer1
;;;820    		
;;;821    		timer2++;
000024  480c              LDR      r0,|L14.88|
000026  6800              LDR      r0,[r0,#0]  ; timer2
000028  1c40              ADDS     r0,r0,#1
00002a  490b              LDR      r1,|L14.88|
00002c  6008              STR      r0,[r1,#0]  ; timer2
;;;822    		
;;;823    
;;;824    		if(ZYGD_Timer++ > 9)
00002e  490b              LDR      r1,|L14.92|
000030  6808              LDR      r0,[r1,#0]  ; ZYGD_Timer
000032  1c41              ADDS     r1,r0,#1
000034  4a09              LDR      r2,|L14.92|
000036  6011              STR      r1,[r2,#0]  ; ZYGD_Timer
000038  2809              CMP      r0,#9
00003a  dd08              BLE      |L14.78|
;;;825    			ZYGD_Timer %= 10;
00003c  4610              MOV      r0,r2
00003e  6800              LDR      r0,[r0,#0]  ; ZYGD_Timer
000040  210a              MOVS     r1,#0xa
000042  fb90f2f1          SDIV     r2,r0,r1
000046  fb010012          MLS      r0,r1,r2,r0
00004a  4904              LDR      r1,|L14.92|
00004c  6008              STR      r0,[r1,#0]  ; ZYGD_Timer
                  |L14.78|
;;;826    		
;;;827    	}
;;;828    }
00004e  bd10              POP      {r4,pc}
;;;829    
                          ENDP

                  |L14.80|
                          DCD      timer0
                  |L14.84|
                          DCD      timer1
                  |L14.88|
                          DCD      timer2
                  |L14.92|
                          DCD      ZYGD_Timer

                          AREA ||i.R_485_Ctrl||, CODE, READONLY, ALIGN=1

                  R_485_Ctrl PROC
;;;444    
;;;445    u8 R_485_Ctrl(u8 tt)
000000  4601              MOV      r1,r0
;;;446    {
;;;447    	u8 ch = tt;
;;;448    	
;;;449    //	GPIO_SetBits(PORT_RS485_CTRL,RS485_1_CTRL);
;;;450    //	GPIO_SetBits(PORT_RS485_CTRL,RS485_2_CTRL);
;;;451    	
;;;452    	return ch;	
000002  4608              MOV      r0,r1
;;;453    }
000004  4770              BX       lr
;;;454    	
                          ENDP


                          AREA ||i.TASK1_CallBack1||, CODE, READONLY, ALIGN=2

                  TASK1_CallBack1 PROC
;;;294    
;;;295    void TASK1_CallBack1(u8 delay)
000000  b510              PUSH     {r4,lr}
;;;296    {
000002  4604              MOV      r4,r0
;;;297    	os_dly_wait(delay);
000004  4620              MOV      r0,r4
000006  f8dfc008          LDR      r12,|L16.16|
00000a  df00              SVC      #0x0
;;;298    }
00000c  bd10              POP      {r4,pc}
;;;299    
                          ENDP

00000e  0000              DCW      0x0000
                  |L16.16|
                          DCD      rt_dly_wait

                          AREA ||i.TASK1_CallBack2||, CODE, READONLY, ALIGN=2

                  TASK1_CallBack2 PROC
;;;300    
;;;301    void TASK1_CallBack2(void)
000000  4803              LDR      r0,|L17.16|
;;;302    {
;;;303    //	bsp_Led1Toggle();
;;;304    //	bsp_Led4Toggle();
;;;305    	
;;;306    	os_evt_set(IWDG_BIT_1, HandleTaskWdg);
000002  6801              LDR      r1,[r0,#0]  ; HandleTaskWdg
000004  2002              MOVS     r0,#2
000006  f8dfc00c          LDR      r12,|L17.20|
00000a  df00              SVC      #0x0
;;;307    }
00000c  4770              BX       lr
;;;308    
                          ENDP

00000e  0000              DCW      0x0000
                  |L17.16|
                          DCD      HandleTaskWdg
                  |L17.20|
                          DCD      rt_evt_set

                          AREA ||i.TIM_CallBack1||, CODE, READONLY, ALIGN=2

                  TIM_CallBack1 PROC
;;;244    */
;;;245    void TIM_CallBack1(void)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247    	
;;;248    	if(first_read_flag)
000002  4809              LDR      r0,|L18.40|
000004  7800              LDRB     r0,[r0,#0]  ; first_read_flag
000006  b118              CBZ      r0,|L18.16|
;;;249    		Cmd_Type = 0x06;
000008  2006              MOVS     r0,#6
00000a  4908              LDR      r1,|L18.44|
00000c  7008              STRB     r0,[r1,#0]
00000e  e005              B        |L18.28|
                  |L18.16|
;;;250    	else
;;;251    	{
;;;252    		Cmd_Type = 0x02;
000010  2002              MOVS     r0,#2
000012  4906              LDR      r1,|L18.44|
000014  7008              STRB     r0,[r1,#0]
;;;253    		first_read_flag = 0x0ff;
000016  20ff              MOVS     r0,#0xff
000018  4903              LDR      r1,|L18.40|
00001a  7008              STRB     r0,[r1,#0]
                  |L18.28|
;;;254    	}		
;;;255    	
;;;256    	isr_evt_set (GAUG_BIT_0, HandleTaskGauge);	
00001c  4804              LDR      r0,|L18.48|
00001e  6801              LDR      r1,[r0,#0]  ; HandleTaskGauge
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       isr_evt_set
;;;257    }
000026  bd10              POP      {r4,pc}
;;;258    
                          ENDP

                  |L18.40|
                          DCD      first_read_flag
                  |L18.44|
                          DCD      Cmd_Type
                  |L18.48|
                          DCD      HandleTaskGauge

                          AREA ||i.TIM_CallBack2||, CODE, READONLY, ALIGN=2

                  TIM_CallBack2 PROC
;;;258    
;;;259    void TIM_CallBack2(void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261    	isr_evt_set (GAUG_BIT_1, HandleTaskGauge);
000002  4803              LDR      r0,|L19.16|
000004  6801              LDR      r1,[r0,#0]  ; HandleTaskGauge
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       isr_evt_set
;;;262    }
00000c  bd10              POP      {r4,pc}
;;;263    
                          ENDP

00000e  0000              DCW      0x0000
                  |L19.16|
                          DCD      HandleTaskGauge

                          AREA ||i.TIM_CallBack3||, CODE, READONLY, ALIGN=2

                  TIM_CallBack3 PROC
;;;268    
;;;269    void TIM_CallBack3(void)
000000  b510              PUSH     {r4,lr}
;;;270    {
;;;271    	isr_evt_set (ATOS_BIT_0, HandleTaskAtmos);
000002  4803              LDR      r0,|L20.16|
000004  6801              LDR      r1,[r0,#0]  ; HandleTaskAtmos
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       isr_evt_set
;;;272    }
00000c  bd10              POP      {r4,pc}
;;;273    
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      HandleTaskAtmos

                          AREA ||i.TIM_CallBack4||, CODE, READONLY, ALIGN=2

                  TIM_CallBack4 PROC
;;;273    
;;;274    void TIM_CallBack4(void)
000000  b510              PUSH     {r4,lr}
;;;275    {
;;;276    	isr_evt_set (GAUG_BIT_2, HandleTaskGauge);
000002  4803              LDR      r0,|L21.16|
000004  6801              LDR      r1,[r0,#0]  ; HandleTaskGauge
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       isr_evt_set
;;;277    }
00000c  bd10              POP      {r4,pc}
;;;278    
                          ENDP

00000e  0000              DCW      0x0000
                  |L21.16|
                          DCD      HandleTaskGauge

                          AREA ||i.USART_CallBack2||, CODE, READONLY, ALIGN=2

                  USART_CallBack2 PROC
;;;279    
;;;280    void USART_CallBack2(void)
000000  b510              PUSH     {r4,lr}
;;;281    {
;;;282    	isr_evt_set (HUMI_BIT_1, HandleTaskHumit);
000002  4803              LDR      r0,|L22.16|
000004  6801              LDR      r1,[r0,#0]  ; HandleTaskHumit
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       isr_evt_set
;;;283    }
00000c  bd10              POP      {r4,pc}
;;;284    
                          ENDP

00000e  0000              DCW      0x0000
                  |L22.16|
                          DCD      HandleTaskHumit

                          AREA ||i.USART_CallBack21||, CODE, READONLY, ALIGN=2

                  USART_CallBack21 PROC
;;;284    
;;;285    void USART_CallBack21(void)
000000  b510              PUSH     {r4,lr}
;;;286    {
;;;287    	isr_evt_set (GAUG_BIT_1, HandleTaskGauge);
000002  4803              LDR      r0,|L23.16|
000004  6801              LDR      r1,[r0,#0]  ; HandleTaskGauge
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       isr_evt_set
;;;288    }
00000c  bd10              POP      {r4,pc}
;;;289    
                          ENDP

00000e  0000              DCW      0x0000
                  |L23.16|
                          DCD      HandleTaskGauge

                          AREA ||i.USART_CallBack5||, CODE, READONLY, ALIGN=2

                  USART_CallBack5 PROC
;;;289    
;;;290    void USART_CallBack5(void)
000000  b510              PUSH     {r4,lr}
;;;291    {
;;;292    	isr_evt_set (STATE_BIT_0, HandleTaskSTA);
000002  4803              LDR      r0,|L24.16|
000004  6801              LDR      r1,[r0,#0]  ; HandleTaskSTA
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       isr_evt_set
;;;293    }
00000c  bd10              POP      {r4,pc}
;;;294    
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      HandleTaskSTA

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;145    
;;;146    int main (void) 
000000  f7fffffe          BL       bsp_Init
;;;147    {	
;;;148    	bsp_Init();
;;;149    	//printf("初始化完成\r\n");
;;;150     	os_sys_init_user (AppTaskStart,              
000004  f7fffffe          BL       os_set_env
000008  4a03              LDR      r2,|L25.24|
00000a  4904              LDR      r1,|L25.28|
00000c  4804              LDR      r0,|L25.32|
00000e  f8dfc014          LDR      r12,|L25.36|
000012  df00              SVC      #0x0
;;;151    	                  5,                         
;;;152    	                  &AppTaskStartStk,         
;;;153    	                  sizeof(AppTaskStartStk)); 
;;;154    	while(1);
000014  bf00              NOP      
                  |L25.22|
000016  e7fe              B        |L25.22|
;;;155    }
;;;156    
                          ENDP

                  |L25.24|
                          DCD      AppTaskStartStk
                  |L25.28|
                          DCD      0x00400005
                  |L25.32|
                          DCD      AppTaskStart
                  |L25.36|
                          DCD      rt_sys_init

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  AppTaskCommStk
                          %        4096
                  AppTaskWdgStk
                          %        256
                  AppTaskDAQStk
                          %        512
                  AppTaskSTAStk
                          %        512
                  AppTaskAtmosStk
                          %        2048
                  AppTaskHumitStk
                          %        2048
                  AppTaskCtlStk
                          %        512
                  AppTaskGaugeStk
                          %        2048
                  AppTaskWaterTempStk
                          %        2048
                  AppTaskStartStk
                          %        16384
                  AppTaskMsgProStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  HandleTaskComm
                          DCD      0x00000000
                  HandleTaskWdg
                          DCD      0x00000000
                  HandleTaskDAQ
                          DCD      0x00000000
                  HandleTaskSTA
                          DCD      0x00000000
                  HandleTaskAtmos
                          DCD      0x00000000
                  HandleTaskHumit
                          DCD      0x00000000
                  HandleTaskCtl
                          DCD      0x00000000
                  HandleTaskGauge
                          DCD      0x00000000
                  HandleTaskWaterTemp
                          DCD      0x00000000
                  HandleTaskMsgPro
                          DCD      0x00000000
                  Cmd_Type
000028  00                DCB      0x00
                  first_read_flag
000029  00                DCB      0x00
                  r_485_port
00002a  0000              DCB      0x00,0x00
                  wait_time_gauge
                          DCD      0x00000000
                  ulTicks1
                          DCD      0x00000000
                  ulTicks2
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_3afc19fd____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_3afc19fd____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_3afc19fd____REVSH|
#line 128
|__asm___6_main_c_3afc19fd____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
